<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="933.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="933.00"> </text><svg id="frames" x="10" width="1180"><g><title>[unknown] (12 samples, 9.09%)</title><rect x="1.5152%" y="869" width="9.0909%" height="15" fill="rgb(227,0,7)"/><text x="1.7652%" y="879.50">[unknown]</text></g><g><title>[unknown] (3 samples, 2.27%)</title><rect x="8.3333%" y="853" width="2.2727%" height="15" fill="rgb(217,0,24)"/><text x="8.5833%" y="863.50">[..</text></g><g><title>[unknown] (2 samples, 1.52%)</title><rect x="9.0909%" y="837" width="1.5152%" height="15" fill="rgb(221,193,54)"/><text x="9.3409%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="9.8485%" y="821" width="0.7576%" height="15" fill="rgb(248,212,6)"/><text x="10.0985%" y="831.50"></text></g><g><title>[unknown] (22 samples, 16.67%)</title><rect x="10.6061%" y="837" width="16.6667%" height="15" fill="rgb(208,68,35)"/><text x="10.8561%" y="847.50">[unknown]</text></g><g><title>[unknown] (21 samples, 15.91%)</title><rect x="11.3636%" y="821" width="15.9091%" height="15" fill="rgb(232,128,0)"/><text x="11.6136%" y="831.50">[unknown]</text></g><g><title>[unknown] (14 samples, 10.61%)</title><rect x="16.6667%" y="805" width="10.6061%" height="15" fill="rgb(207,160,47)"/><text x="16.9167%" y="815.50">[unknown]</text></g><g><title>[unknown] (10 samples, 7.58%)</title><rect x="19.6970%" y="789" width="7.5758%" height="15" fill="rgb(228,23,34)"/><text x="19.9470%" y="799.50">[unknown]</text></g><g><title>[unknown] (4 samples, 3.03%)</title><rect x="24.2424%" y="773" width="3.0303%" height="15" fill="rgb(218,30,26)"/><text x="24.4924%" y="783.50">[un..</text></g><g><title>__GI___ctype_init (2 samples, 1.52%)</title><rect x="27.2727%" y="837" width="1.5152%" height="15" fill="rgb(220,122,19)"/><text x="27.5227%" y="847.50"></text></g><g><title>__GI___sigsetjmp (1 samples, 0.76%)</title><rect x="28.7879%" y="837" width="0.7576%" height="15" fill="rgb(250,228,42)"/><text x="29.0379%" y="847.50"></text></g><g><title>__GI__setjmp (4 samples, 3.03%)</title><rect x="29.5455%" y="837" width="3.0303%" height="15" fill="rgb(240,193,28)"/><text x="29.7955%" y="847.50">__G..</text></g><g><title>__sigjmp_save (1 samples, 0.76%)</title><rect x="32.5758%" y="837" width="0.7576%" height="15" fill="rgb(216,20,37)"/><text x="32.8258%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.76%)</title><rect x="33.3333%" y="821" width="0.7576%" height="15" fill="rgb(206,188,39)"/><text x="33.5833%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.76%)</title><rect x="33.3333%" y="805" width="0.7576%" height="15" fill="rgb(217,207,13)"/><text x="33.5833%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.76%)</title><rect x="33.3333%" y="789" width="0.7576%" height="15" fill="rgb(231,73,38)"/><text x="33.5833%" y="799.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (1 samples, 0.76%)</title><rect x="33.3333%" y="773" width="0.7576%" height="15" fill="rgb(225,20,46)"/><text x="33.5833%" y="783.50"></text></g><g><title>__prctl (1 samples, 0.76%)</title><rect x="33.3333%" y="757" width="0.7576%" height="15" fill="rgb(210,31,41)"/><text x="33.5833%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="33.3333%" y="741" width="0.7576%" height="15" fill="rgb(221,200,47)"/><text x="33.5833%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="33.3333%" y="725" width="0.7576%" height="15" fill="rgb(226,26,5)"/><text x="33.5833%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="33.3333%" y="709" width="0.7576%" height="15" fill="rgb(249,33,26)"/><text x="33.5833%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="33.3333%" y="693" width="0.7576%" height="15" fill="rgb(235,183,28)"/><text x="33.5833%" y="703.50"></text></g><g><title>__GI___sigaltstack (5 samples, 3.79%)</title><rect x="34.0909%" y="789" width="3.7879%" height="15" fill="rgb(221,5,38)"/><text x="34.3409%" y="799.50">__GI..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="34.0909%" y="773" width="3.7879%" height="15" fill="rgb(247,18,42)"/><text x="34.3409%" y="783.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="34.0909%" y="757" width="3.7879%" height="15" fill="rgb(241,131,45)"/><text x="34.3409%" y="767.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.79%)</title><rect x="34.0909%" y="741" width="3.7879%" height="15" fill="rgb(249,31,29)"/><text x="34.3409%" y="751.50">[unk..</text></g><g><title>[unknown] (4 samples, 3.03%)</title><rect x="34.8485%" y="725" width="3.0303%" height="15" fill="rgb(225,111,53)"/><text x="35.0985%" y="735.50">[un..</text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="37.1212%" y="709" width="0.7576%" height="15" fill="rgb(238,160,17)"/><text x="37.3712%" y="719.50"></text></g><g><title>__clone3 (39 samples, 29.55%)</title><rect x="10.6061%" y="869" width="29.5455%" height="15" fill="rgb(214,148,48)"/><text x="10.8561%" y="879.50">__clone3</text></g><g><title>start_thread (39 samples, 29.55%)</title><rect x="10.6061%" y="853" width="29.5455%" height="15" fill="rgb(232,36,49)"/><text x="10.8561%" y="863.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9 samples, 6.82%)</title><rect x="33.3333%" y="837" width="6.8182%" height="15" fill="rgb(209,103,24)"/><text x="33.5833%" y="847.50">std::sys:..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (8 samples, 6.06%)</title><rect x="34.0909%" y="821" width="6.0606%" height="15" fill="rgb(229,88,8)"/><text x="34.3409%" y="831.50">std::sys..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (8 samples, 6.06%)</title><rect x="34.0909%" y="805" width="6.0606%" height="15" fill="rgb(213,181,19)"/><text x="34.3409%" y="815.50">std::sys..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (3 samples, 2.27%)</title><rect x="37.8788%" y="789" width="2.2727%" height="15" fill="rgb(254,191,54)"/><text x="38.1288%" y="799.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (3 samples, 2.27%)</title><rect x="37.8788%" y="773" width="2.2727%" height="15" fill="rgb(241,83,37)"/><text x="38.1288%" y="783.50">s..</text></g><g><title>std::sys::unix::os::page_size (3 samples, 2.27%)</title><rect x="37.8788%" y="757" width="2.2727%" height="15" fill="rgb(233,36,39)"/><text x="38.1288%" y="767.50">s..</text></g><g><title>__GI___sysconf (3 samples, 2.27%)</title><rect x="37.8788%" y="741" width="2.2727%" height="15" fill="rgb(226,3,54)"/><text x="38.1288%" y="751.50">_..</text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="40.1515%" y="853" width="0.7576%" height="15" fill="rgb(245,192,40)"/><text x="40.4015%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="40.1515%" y="837" width="0.7576%" height="15" fill="rgb(238,167,29)"/><text x="40.4015%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="40.1515%" y="821" width="0.7576%" height="15" fill="rgb(232,182,51)"/><text x="40.4015%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="41.6667%" y="837" width="0.7576%" height="15" fill="rgb(231,60,39)"/><text x="41.9167%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="41.6667%" y="821" width="0.7576%" height="15" fill="rgb(208,69,12)"/><text x="41.9167%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="41.6667%" y="805" width="0.7576%" height="15" fill="rgb(235,93,37)"/><text x="41.9167%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="41.6667%" y="789" width="0.7576%" height="15" fill="rgb(213,116,39)"/><text x="41.9167%" y="799.50"></text></g><g><title>_dl_start_final (1 samples, 0.76%)</title><rect x="42.4242%" y="837" width="0.7576%" height="15" fill="rgb(222,207,29)"/><text x="42.6742%" y="847.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.76%)</title><rect x="42.4242%" y="821" width="0.7576%" height="15" fill="rgb(206,96,30)"/><text x="42.6742%" y="831.50"></text></g><g><title>dl_platform_init (1 samples, 0.76%)</title><rect x="42.4242%" y="805" width="0.7576%" height="15" fill="rgb(218,138,4)"/><text x="42.6742%" y="815.50"></text></g><g><title>init_cpu_features (1 samples, 0.76%)</title><rect x="42.4242%" y="789" width="0.7576%" height="15" fill="rgb(250,191,14)"/><text x="42.6742%" y="799.50"></text></g><g><title>dl_init_cacheinfo (1 samples, 0.76%)</title><rect x="42.4242%" y="773" width="0.7576%" height="15" fill="rgb(239,60,40)"/><text x="42.6742%" y="783.50"></text></g><g><title>handle_amd (1 samples, 0.76%)</title><rect x="42.4242%" y="757" width="0.7576%" height="15" fill="rgb(206,27,48)"/><text x="42.6742%" y="767.50"></text></g><g><title>mining-proxy (58 samples, 43.94%)</title><rect x="0.0000%" y="885" width="43.9394%" height="15" fill="rgb(225,35,8)"/><text x="0.2500%" y="895.50">mining-proxy</text></g><g><title>_start (5 samples, 3.79%)</title><rect x="40.1515%" y="869" width="3.7879%" height="15" fill="rgb(250,213,24)"/><text x="40.4015%" y="879.50">_sta..</text></g><g><title>_dl_start (4 samples, 3.03%)</title><rect x="40.9091%" y="853" width="3.0303%" height="15" fill="rgb(247,123,22)"/><text x="41.1591%" y="863.50">_dl..</text></g><g><title>rtld_timer_start (1 samples, 0.76%)</title><rect x="43.1818%" y="837" width="0.7576%" height="15" fill="rgb(231,138,38)"/><text x="43.4318%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="43.1818%" y="821" width="0.7576%" height="15" fill="rgb(231,145,46)"/><text x="43.4318%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="43.1818%" y="805" width="0.7576%" height="15" fill="rgb(251,118,11)"/><text x="43.4318%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="43.1818%" y="789" width="0.7576%" height="15" fill="rgb(217,147,25)"/><text x="43.4318%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="43.1818%" y="773" width="0.7576%" height="15" fill="rgb(247,81,37)"/><text x="43.4318%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="43.1818%" y="757" width="0.7576%" height="15" fill="rgb(209,12,38)"/><text x="43.4318%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="43.1818%" y="741" width="0.7576%" height="15" fill="rgb(227,1,9)"/><text x="43.4318%" y="751.50"></text></g><g><title>&lt;noise_sv2::Initiator as noise_sv2::handshake::Step&gt;::step (1 samples, 0.76%)</title><rect x="43.9394%" y="869" width="0.7576%" height="15" fill="rgb(248,47,43)"/><text x="44.1894%" y="879.50"></text></g><g><title>snow::handshakestate::HandshakeState::read_message (1 samples, 0.76%)</title><rect x="43.9394%" y="853" width="0.7576%" height="15" fill="rgb(221,10,30)"/><text x="44.1894%" y="863.50"></text></g><g><title>snow::handshakestate::HandshakeState::_read_message (1 samples, 0.76%)</title><rect x="43.9394%" y="837" width="0.7576%" height="15" fill="rgb(210,229,1)"/><text x="44.1894%" y="847.50"></text></g><g><title>snow::handshakestate::HandshakeState::dh (1 samples, 0.76%)</title><rect x="43.9394%" y="821" width="0.7576%" height="15" fill="rgb(222,148,37)"/><text x="44.1894%" y="831.50"></text></g><g><title>&lt;snow::resolvers::default::Dh25519 as snow::types::Dh&gt;::dh (1 samples, 0.76%)</title><rect x="43.9394%" y="805" width="0.7576%" height="15" fill="rgb(234,67,33)"/><text x="44.1894%" y="815.50"></text></g><g><title>curve25519_dalek::montgomery::&lt;impl core::ops::arith::Mul&lt;curve25519_dalek::montgomery::MontgomeryPoint&gt; for curve25519_dalek::scalar::Scalar&gt;::mul (1 samples, 0.76%)</title><rect x="43.9394%" y="789" width="0.7576%" height="15" fill="rgb(247,98,35)"/><text x="44.1894%" y="799.50"></text></g><g><title>curve25519_dalek::montgomery::&lt;impl core::ops::arith::Mul&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint&gt; for &amp;curve25519_dalek::scalar::Scalar&gt;::mul (1 samples, 0.76%)</title><rect x="43.9394%" y="773" width="0.7576%" height="15" fill="rgb(247,138,52)"/><text x="44.1894%" y="783.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (1 samples, 0.76%)</title><rect x="43.9394%" y="757" width="0.7576%" height="15" fill="rgb(213,79,30)"/><text x="44.1894%" y="767.50"></text></g><g><title>curve25519_dalek::montgomery::differential_add_and_double (1 samples, 0.76%)</title><rect x="43.9394%" y="741" width="0.7576%" height="15" fill="rgb(246,177,23)"/><text x="44.1894%" y="751.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.76%)</title><rect x="43.9394%" y="725" width="0.7576%" height="15" fill="rgb(230,62,27)"/><text x="44.1894%" y="735.50"></text></g><g><title>&lt;tokio::loom::std::parking_lot::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.76%)</title><rect x="44.6970%" y="613" width="0.7576%" height="15" fill="rgb(216,154,8)"/><text x="44.9470%" y="623.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.76%)</title><rect x="44.6970%" y="597" width="0.7576%" height="15" fill="rgb(244,35,45)"/><text x="44.9470%" y="607.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (1 samples, 0.76%)</title><rect x="45.4545%" y="597" width="0.7576%" height="15" fill="rgb(251,115,12)"/><text x="45.7045%" y="607.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (1 samples, 0.76%)</title><rect x="45.4545%" y="581" width="0.7576%" height="15" fill="rgb(240,54,50)"/><text x="45.7045%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.76%)</title><rect x="45.4545%" y="565" width="0.7576%" height="15" fill="rgb(233,84,52)"/><text x="45.7045%" y="575.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.76%)</title><rect x="45.4545%" y="549" width="0.7576%" height="15" fill="rgb(207,117,47)"/><text x="45.7045%" y="559.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (2 samples, 1.52%)</title><rect x="45.4545%" y="613" width="1.5152%" height="15" fill="rgb(249,43,39)"/><text x="45.7045%" y="623.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (1 samples, 0.76%)</title><rect x="46.2121%" y="597" width="0.7576%" height="15" fill="rgb(209,38,44)"/><text x="46.4621%" y="607.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.76%)</title><rect x="46.9697%" y="533" width="0.7576%" height="15" fill="rgb(236,212,23)"/><text x="47.2197%" y="543.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_one (1 samples, 0.76%)</title><rect x="46.9697%" y="517" width="0.7576%" height="15" fill="rgb(242,79,21)"/><text x="47.2197%" y="527.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (1 samples, 0.76%)</title><rect x="46.9697%" y="501" width="0.7576%" height="15" fill="rgb(211,96,35)"/><text x="47.2197%" y="511.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (1 samples, 0.76%)</title><rect x="46.9697%" y="485" width="0.7576%" height="15" fill="rgb(253,215,40)"/><text x="47.2197%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.76%)</title><rect x="46.9697%" y="469" width="0.7576%" height="15" fill="rgb(211,81,21)"/><text x="47.2197%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.76%)</title><rect x="46.9697%" y="453" width="0.7576%" height="15" fill="rgb(208,190,38)"/><text x="47.2197%" y="463.50"></text></g><g><title>core::mem::drop (2 samples, 1.52%)</title><rect x="46.9697%" y="613" width="1.5152%" height="15" fill="rgb(235,213,38)"/><text x="47.2197%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::blocking::pool::Shared&gt;&gt; (2 samples, 1.52%)</title><rect x="46.9697%" y="597" width="1.5152%" height="15" fill="rgb(237,122,38)"/><text x="47.2197%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::blocking::pool::Shared&gt;&gt; (2 samples, 1.52%)</title><rect x="46.9697%" y="581" width="1.5152%" height="15" fill="rgb(244,218,35)"/><text x="47.2197%" y="591.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 1.52%)</title><rect x="46.9697%" y="565" width="1.5152%" height="15" fill="rgb(240,68,47)"/><text x="47.2197%" y="575.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (2 samples, 1.52%)</title><rect x="46.9697%" y="549" width="1.5152%" height="15" fill="rgb(210,16,53)"/><text x="47.2197%" y="559.50"></text></g><g><title>parking_lot_core::parking_lot::deadlock::release_resource (1 samples, 0.76%)</title><rect x="47.7273%" y="533" width="0.7576%" height="15" fill="rgb(235,124,12)"/><text x="47.9773%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (1 samples, 0.76%)</title><rect x="50.0000%" y="549" width="0.7576%" height="15" fill="rgb(224,169,11)"/><text x="50.2500%" y="559.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (4 samples, 3.03%)</title><rect x="50.7576%" y="517" width="3.0303%" height="15" fill="rgb(250,166,2)"/><text x="51.0076%" y="527.50">par..</text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.76%)</title><rect x="53.0303%" y="501" width="0.7576%" height="15" fill="rgb(242,216,29)"/><text x="53.2803%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.76%)</title><rect x="53.0303%" y="485" width="0.7576%" height="15" fill="rgb(230,116,27)"/><text x="53.2803%" y="495.50"></text></g><g><title>core::mem::replace (1 samples, 0.76%)</title><rect x="53.0303%" y="469" width="0.7576%" height="15" fill="rgb(228,99,48)"/><text x="53.2803%" y="479.50"></text></g><g><title>core::ptr::write (1 samples, 0.76%)</title><rect x="53.0303%" y="453" width="0.7576%" height="15" fill="rgb(253,11,6)"/><text x="53.2803%" y="463.50"></text></g><g><title>parking_lot_core::parking_lot::Bucket::new (1 samples, 0.76%)</title><rect x="53.7879%" y="357" width="0.7576%" height="15" fill="rgb(247,143,39)"/><text x="54.0379%" y="367.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::new (1 samples, 0.76%)</title><rect x="53.7879%" y="341" width="0.7576%" height="15" fill="rgb(236,97,10)"/><text x="54.0379%" y="351.50"></text></g><g><title>parking_lot_core::parking_lot::park (6 samples, 4.55%)</title><rect x="50.7576%" y="549" width="4.5455%" height="15" fill="rgb(233,208,19)"/><text x="51.0076%" y="559.50">parki..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (6 samples, 4.55%)</title><rect x="50.7576%" y="533" width="4.5455%" height="15" fill="rgb(216,164,2)"/><text x="51.0076%" y="543.50">parki..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 1.52%)</title><rect x="53.7879%" y="517" width="1.5152%" height="15" fill="rgb(220,129,5)"/><text x="54.0379%" y="527.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (2 samples, 1.52%)</title><rect x="53.7879%" y="501" width="1.5152%" height="15" fill="rgb(242,17,10)"/><text x="54.0379%" y="511.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (2 samples, 1.52%)</title><rect x="53.7879%" y="485" width="1.5152%" height="15" fill="rgb(242,107,0)"/><text x="54.0379%" y="495.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (2 samples, 1.52%)</title><rect x="53.7879%" y="469" width="1.5152%" height="15" fill="rgb(251,28,31)"/><text x="54.0379%" y="479.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (2 samples, 1.52%)</title><rect x="53.7879%" y="453" width="1.5152%" height="15" fill="rgb(233,223,10)"/><text x="54.0379%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 1.52%)</title><rect x="53.7879%" y="437" width="1.5152%" height="15" fill="rgb(215,21,27)"/><text x="54.0379%" y="447.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__init (2 samples, 1.52%)</title><rect x="53.7879%" y="421" width="1.5152%" height="15" fill="rgb(232,23,21)"/><text x="54.0379%" y="431.50"></text></g><g><title>parking_lot_core::parking_lot::ThreadData::new (2 samples, 1.52%)</title><rect x="53.7879%" y="405" width="1.5152%" height="15" fill="rgb(244,5,23)"/><text x="54.0379%" y="415.50"></text></g><g><title>parking_lot_core::parking_lot::grow_hashtable (2 samples, 1.52%)</title><rect x="53.7879%" y="389" width="1.5152%" height="15" fill="rgb(226,81,46)"/><text x="54.0379%" y="399.50"></text></g><g><title>parking_lot_core::parking_lot::HashTable::new (2 samples, 1.52%)</title><rect x="53.7879%" y="373" width="1.5152%" height="15" fill="rgb(247,70,30)"/><text x="54.0379%" y="383.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.76%)</title><rect x="54.5455%" y="357" width="0.7576%" height="15" fill="rgb(212,68,19)"/><text x="54.7955%" y="367.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.76%)</title><rect x="54.5455%" y="341" width="0.7576%" height="15" fill="rgb(240,187,13)"/><text x="54.7955%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 0.76%)</title><rect x="54.5455%" y="325" width="0.7576%" height="15" fill="rgb(223,113,26)"/><text x="54.7955%" y="335.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.76%)</title><rect x="54.5455%" y="309" width="0.7576%" height="15" fill="rgb(206,192,2)"/><text x="54.7955%" y="319.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.76%)</title><rect x="54.5455%" y="293" width="0.7576%" height="15" fill="rgb(241,108,4)"/><text x="54.7955%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="54.5455%" y="277" width="0.7576%" height="15" fill="rgb(247,173,49)"/><text x="54.7955%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="54.5455%" y="261" width="0.7576%" height="15" fill="rgb(224,114,35)"/><text x="54.7955%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="54.5455%" y="245" width="0.7576%" height="15" fill="rgb(245,159,27)"/><text x="54.7955%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="54.5455%" y="229" width="0.7576%" height="15" fill="rgb(245,172,44)"/><text x="54.7955%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="54.5455%" y="213" width="0.7576%" height="15" fill="rgb(236,23,11)"/><text x="54.7955%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="54.5455%" y="197" width="0.7576%" height="15" fill="rgb(205,117,38)"/><text x="54.7955%" y="207.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 1.52%)</title><rect x="55.3030%" y="517" width="1.5152%" height="15" fill="rgb(237,72,25)"/><text x="55.5530%" y="527.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.76%)</title><rect x="56.8182%" y="517" width="0.7576%" height="15" fill="rgb(244,70,9)"/><text x="57.0682%" y="527.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (13 samples, 9.85%)</title><rect x="48.4848%" y="565" width="9.8485%" height="15" fill="rgb(217,125,39)"/><text x="48.7348%" y="575.50">parking_lot::r..</text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (4 samples, 3.03%)</title><rect x="55.3030%" y="549" width="3.0303%" height="15" fill="rgb(235,36,10)"/><text x="55.5530%" y="559.50">par..</text></g><g><title>parking_lot_core::spinwait::cpu_relax (4 samples, 3.03%)</title><rect x="55.3030%" y="533" width="3.0303%" height="15" fill="rgb(251,123,47)"/><text x="55.5530%" y="543.50">par..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.76%)</title><rect x="57.5758%" y="517" width="0.7576%" height="15" fill="rgb(221,13,13)"/><text x="57.8258%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.76%)</title><rect x="57.5758%" y="501" width="0.7576%" height="15" fill="rgb(238,131,9)"/><text x="57.8258%" y="511.50"></text></g><g><title>&lt;u32 as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.76%)</title><rect x="57.5758%" y="485" width="0.7576%" height="15" fill="rgb(211,50,8)"/><text x="57.8258%" y="495.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (14 samples, 10.61%)</title><rect x="48.4848%" y="613" width="10.6061%" height="15" fill="rgb(245,182,24)"/><text x="48.7348%" y="623.50">tokio::loom::st..</text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (14 samples, 10.61%)</title><rect x="48.4848%" y="597" width="10.6061%" height="15" fill="rgb(242,14,37)"/><text x="48.7348%" y="607.50">lock_api::mutex..</text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (14 samples, 10.61%)</title><rect x="48.4848%" y="581" width="10.6061%" height="15" fill="rgb(246,228,12)"/><text x="48.7348%" y="591.50">&lt;parking_lot::r..</text></g><g><title>parking_lot_core::parking_lot::deadlock::acquire_resource (1 samples, 0.76%)</title><rect x="58.3333%" y="565" width="0.7576%" height="15" fill="rgb(213,55,15)"/><text x="58.5833%" y="575.50"></text></g><g><title>&lt;parking_lot_core::parking_lot::ParkResult as core::cmp::PartialEq&gt;::eq (2 samples, 1.52%)</title><rect x="59.0909%" y="133" width="1.5152%" height="15" fill="rgb(209,9,3)"/><text x="59.3409%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="59.8485%" y="117" width="0.7576%" height="15" fill="rgb(230,59,30)"/><text x="60.0985%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="59.8485%" y="101" width="0.7576%" height="15" fill="rgb(209,121,21)"/><text x="60.0985%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="59.8485%" y="85" width="0.7576%" height="15" fill="rgb(220,109,13)"/><text x="60.0985%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;parking_lot_core::parking_lot::ThreadData&gt;&gt; (1 samples, 0.76%)</title><rect x="60.6061%" y="101" width="0.7576%" height="15" fill="rgb(232,18,1)"/><text x="60.8561%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (7 samples, 5.30%)</title><rect x="65.9091%" y="69" width="5.3030%" height="15" fill="rgb(215,41,42)"/><text x="66.1591%" y="79.50">core::..</text></g><g><title>core::sync::atomic::atomic_load (5 samples, 3.79%)</title><rect x="67.4242%" y="53" width="3.7879%" height="15" fill="rgb(224,123,36)"/><text x="67.6742%" y="63.50">core..</text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="70.4545%" y="37" width="0.7576%" height="15" fill="rgb(240,125,3)"/><text x="70.7045%" y="47.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (12 samples, 9.09%)</title><rect x="64.3939%" y="85" width="9.0909%" height="15" fill="rgb(205,98,50)"/><text x="64.6439%" y="95.50">&lt;parking_lot_..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (3 samples, 2.27%)</title><rect x="71.2121%" y="69" width="2.2727%" height="15" fill="rgb(205,185,37)"/><text x="71.4621%" y="79.50">p..</text></g><g><title>syscall (1 samples, 0.76%)</title><rect x="72.7273%" y="53" width="0.7576%" height="15" fill="rgb(238,207,15)"/><text x="72.9773%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="72.7273%" y="37" width="0.7576%" height="15" fill="rgb(213,199,42)"/><text x="72.9773%" y="47.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_condvar (20 samples, 15.15%)</title><rect x="59.0909%" y="197" width="15.1515%" height="15" fill="rgb(235,201,11)"/><text x="59.3409%" y="207.50">tokio::runtime::thread_..</text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (20 samples, 15.15%)</title><rect x="59.0909%" y="181" width="15.1515%" height="15" fill="rgb(207,46,11)"/><text x="59.3409%" y="191.50">tokio::loom::std::parki..</text></g><g><title>parking_lot::condvar::Condvar::wait (20 samples, 15.15%)</title><rect x="59.0909%" y="165" width="15.1515%" height="15" fill="rgb(241,35,35)"/><text x="59.3409%" y="175.50">parking_lot::condvar::C..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (20 samples, 15.15%)</title><rect x="59.0909%" y="149" width="15.1515%" height="15" fill="rgb(243,32,47)"/><text x="59.3409%" y="159.50">parking_lot::condvar::C..</text></g><g><title>parking_lot_core::parking_lot::park (18 samples, 13.64%)</title><rect x="60.6061%" y="133" width="13.6364%" height="15" fill="rgb(247,202,23)"/><text x="60.8561%" y="143.50">parking_lot_core::par..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (18 samples, 13.64%)</title><rect x="60.6061%" y="117" width="13.6364%" height="15" fill="rgb(219,102,11)"/><text x="60.8561%" y="127.50">parking_lot_core::par..</text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (17 samples, 12.88%)</title><rect x="61.3636%" y="101" width="12.8788%" height="15" fill="rgb(243,110,44)"/><text x="61.6136%" y="111.50">parking_lot_core::p..</text></g><g><title>parking_lot_core::parking_lot::deadlock::on_unpark (1 samples, 0.76%)</title><rect x="73.4848%" y="85" width="0.7576%" height="15" fill="rgb(222,74,54)"/><text x="73.7348%" y="95.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="74.2424%" y="117" width="1.5152%" height="15" fill="rgb(216,99,12)"/><text x="74.4924%" y="127.50"></text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="74.2424%" y="101" width="1.5152%" height="15" fill="rgb(226,22,26)"/><text x="74.4924%" y="111.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="74.2424%" y="85" width="1.5152%" height="15" fill="rgb(217,163,10)"/><text x="74.4924%" y="95.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="74.2424%" y="69" width="1.5152%" height="15" fill="rgb(213,25,53)"/><text x="74.4924%" y="79.50"></text></g><g><title>tokio::io::driver::Driver::turn (2 samples, 1.52%)</title><rect x="74.2424%" y="53" width="1.5152%" height="15" fill="rgb(252,105,26)"/><text x="74.4924%" y="63.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (23 samples, 17.42%)</title><rect x="59.0909%" y="229" width="17.4242%" height="15" fill="rgb(220,39,43)"/><text x="59.3409%" y="239.50">&lt;tokio::runtime::thread_poo..</text></g><g><title>tokio::runtime::thread_pool::park::Inner::park (23 samples, 17.42%)</title><rect x="59.0909%" y="213" width="17.4242%" height="15" fill="rgb(229,68,48)"/><text x="59.3409%" y="223.50">tokio::runtime::thread_pool..</text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_driver (3 samples, 2.27%)</title><rect x="74.2424%" y="197" width="2.2727%" height="15" fill="rgb(252,8,32)"/><text x="74.4924%" y="207.50">t..</text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (3 samples, 2.27%)</title><rect x="74.2424%" y="181" width="2.2727%" height="15" fill="rgb(223,20,43)"/><text x="74.4924%" y="191.50">&lt;..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (3 samples, 2.27%)</title><rect x="74.2424%" y="165" width="2.2727%" height="15" fill="rgb(229,81,49)"/><text x="74.4924%" y="175.50">&lt;..</text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (3 samples, 2.27%)</title><rect x="74.2424%" y="149" width="2.2727%" height="15" fill="rgb(236,28,36)"/><text x="74.4924%" y="159.50">&lt;..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (3 samples, 2.27%)</title><rect x="74.2424%" y="133" width="2.2727%" height="15" fill="rgb(249,185,26)"/><text x="74.4924%" y="143.50">t..</text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (1 samples, 0.76%)</title><rect x="75.7576%" y="117" width="0.7576%" height="15" fill="rgb(249,174,33)"/><text x="76.0076%" y="127.50"></text></g><g><title>tokio::time::driver::ClockTime::now (1 samples, 0.76%)</title><rect x="75.7576%" y="101" width="0.7576%" height="15" fill="rgb(233,201,37)"/><text x="76.0076%" y="111.50"></text></g><g><title>tokio::time::driver::ClockTime::instant_to_tick (1 samples, 0.76%)</title><rect x="75.7576%" y="85" width="0.7576%" height="15" fill="rgb(221,78,26)"/><text x="76.0076%" y="95.50"></text></g><g><title>core::time::Duration::as_millis (1 samples, 0.76%)</title><rect x="75.7576%" y="69" width="0.7576%" height="15" fill="rgb(250,127,30)"/><text x="76.0076%" y="79.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (24 samples, 18.18%)</title><rect x="59.0909%" y="245" width="18.1818%" height="15" fill="rgb(230,49,44)"/><text x="59.3409%" y="255.50">tokio::runtime::thread_pool:..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio::runtime::thread_pool::park::Parker&gt;&gt; (1 samples, 0.76%)</title><rect x="76.5152%" y="229" width="0.7576%" height="15" fill="rgb(229,67,23)"/><text x="76.7652%" y="239.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (1 samples, 0.76%)</title><rect x="77.2727%" y="245" width="0.7576%" height="15" fill="rgb(249,83,47)"/><text x="77.5227%" y="255.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::is_closed (1 samples, 0.76%)</title><rect x="77.2727%" y="229" width="0.7576%" height="15" fill="rgb(215,43,3)"/><text x="77.5227%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::task::inject::Pointers&gt;&gt; (1 samples, 0.76%)</title><rect x="77.2727%" y="213" width="0.7576%" height="15" fill="rgb(238,154,13)"/><text x="77.5227%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::task::inject::Pointers&gt;&gt; (1 samples, 0.76%)</title><rect x="77.2727%" y="197" width="0.7576%" height="15" fill="rgb(219,56,2)"/><text x="77.5227%" y="207.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_from_parked (1 samples, 0.76%)</title><rect x="78.0303%" y="245" width="0.7576%" height="15" fill="rgb(233,0,4)"/><text x="78.2803%" y="255.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::is_parked (1 samples, 0.76%)</title><rect x="78.0303%" y="229" width="0.7576%" height="15" fill="rgb(235,30,7)"/><text x="78.2803%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (1 samples, 0.76%)</title><rect x="78.0303%" y="213" width="0.7576%" height="15" fill="rgb(250,79,13)"/><text x="78.2803%" y="223.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1 samples, 0.76%)</title><rect x="78.0303%" y="197" width="0.7576%" height="15" fill="rgb(211,146,34)"/><text x="78.2803%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1 samples, 0.76%)</title><rect x="78.0303%" y="181" width="0.7576%" height="15" fill="rgb(228,22,38)"/><text x="78.2803%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.76%)</title><rect x="78.0303%" y="165" width="0.7576%" height="15" fill="rgb(235,168,5)"/><text x="78.2803%" y="175.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (27 samples, 20.45%)</title><rect x="59.0909%" y="261" width="20.4545%" height="15" fill="rgb(221,155,16)"/><text x="59.3409%" y="271.50">tokio::runtime::thread_pool::wor..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_to_parked (1 samples, 0.76%)</title><rect x="78.7879%" y="245" width="0.7576%" height="15" fill="rgb(215,215,53)"/><text x="79.0379%" y="255.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_if_work_pending (1 samples, 0.76%)</title><rect x="78.7879%" y="229" width="0.7576%" height="15" fill="rgb(223,4,10)"/><text x="79.0379%" y="239.50"></text></g><g><title>tokio::runtime::thread_pool::queue::Steal&lt;T&gt;::is_empty (1 samples, 0.76%)</title><rect x="78.7879%" y="213" width="0.7576%" height="15" fill="rgb(234,103,6)"/><text x="79.0379%" y="223.50"></text></g><g><title>tokio::runtime::thread_pool::queue::Inner&lt;T&gt;::is_empty (1 samples, 0.76%)</title><rect x="78.7879%" y="197" width="0.7576%" height="15" fill="rgb(227,97,0)"/><text x="79.0379%" y="207.50"></text></g><g><title>tokio::runtime::thread_pool::queue::Inner&lt;T&gt;::len (1 samples, 0.76%)</title><rect x="78.7879%" y="181" width="0.7576%" height="15" fill="rgb(234,150,53)"/><text x="79.0379%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.76%)</title><rect x="78.7879%" y="165" width="0.7576%" height="15" fill="rgb(228,201,54)"/><text x="79.0379%" y="175.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::pop (1 samples, 0.76%)</title><rect x="80.3030%" y="213" width="0.7576%" height="15" fill="rgb(222,22,37)"/><text x="80.5530%" y="223.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (30 samples, 22.73%)</title><rect x="59.0909%" y="309" width="22.7273%" height="15" fill="rgb(237,53,32)"/><text x="59.3409%" y="319.50">tokio::macros::scoped_tls::ScopedKey..</text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (30 samples, 22.73%)</title><rect x="59.0909%" y="293" width="22.7273%" height="15" fill="rgb(233,25,53)"/><text x="59.3409%" y="303.50">tokio::runtime::thread_pool::worker:..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (30 samples, 22.73%)</title><rect x="59.0909%" y="277" width="22.7273%" height="15" fill="rgb(210,40,34)"/><text x="59.3409%" y="287.50">tokio::runtime::thread_pool::worker:..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_task (3 samples, 2.27%)</title><rect x="79.5455%" y="261" width="2.2727%" height="15" fill="rgb(241,220,44)"/><text x="79.7955%" y="271.50">t..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (3 samples, 2.27%)</title><rect x="79.5455%" y="245" width="2.2727%" height="15" fill="rgb(235,28,35)"/><text x="79.7955%" y="255.50">c..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::next_task::{{closure}} (2 samples, 1.52%)</title><rect x="80.3030%" y="229" width="1.5152%" height="15" fill="rgb(210,56,17)"/><text x="80.5530%" y="239.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Worker::inject (1 samples, 0.76%)</title><rect x="81.0606%" y="213" width="0.7576%" height="15" fill="rgb(224,130,29)"/><text x="81.3106%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (50 samples, 37.88%)</title><rect x="44.6970%" y="629" width="37.8788%" height="15" fill="rgb(235,212,8)"/><text x="44.9470%" y="639.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (31 samples, 23.48%)</title><rect x="59.0909%" y="613" width="23.4848%" height="15" fill="rgb(223,33,50)"/><text x="59.3409%" y="623.50">tokio::runtime::blocking::pool::Task:..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (31 samples, 23.48%)</title><rect x="59.0909%" y="597" width="23.4848%" height="15" fill="rgb(219,149,13)"/><text x="59.3409%" y="607.50">tokio::runtime::task::UnownedTask&lt;S&gt;:..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (31 samples, 23.48%)</title><rect x="59.0909%" y="581" width="23.4848%" height="15" fill="rgb(250,156,29)"/><text x="59.3409%" y="591.50">tokio::runtime::task::raw::RawTask::p..</text></g><g><title>tokio::runtime::task::raw::poll (31 samples, 23.48%)</title><rect x="59.0909%" y="565" width="23.4848%" height="15" fill="rgb(216,193,19)"/><text x="59.3409%" y="575.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (31 samples, 23.48%)</title><rect x="59.0909%" y="549" width="23.4848%" height="15" fill="rgb(216,135,14)"/><text x="59.3409%" y="559.50">tokio::runtime::task::harness::Harnes..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (31 samples, 23.48%)</title><rect x="59.0909%" y="533" width="23.4848%" height="15" fill="rgb(241,47,5)"/><text x="59.3409%" y="543.50">tokio::runtime::task::harness::Harnes..</text></g><g><title>tokio::runtime::task::harness::poll_future (31 samples, 23.48%)</title><rect x="59.0909%" y="517" width="23.4848%" height="15" fill="rgb(233,42,35)"/><text x="59.3409%" y="527.50">tokio::runtime::task::harness::poll_f..</text></g><g><title>std::panic::catch_unwind (31 samples, 23.48%)</title><rect x="59.0909%" y="501" width="23.4848%" height="15" fill="rgb(231,13,6)"/><text x="59.3409%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (31 samples, 23.48%)</title><rect x="59.0909%" y="485" width="23.4848%" height="15" fill="rgb(207,181,40)"/><text x="59.3409%" y="495.50">std::panicking::try</text></g><g><title>__rust_try (31 samples, 23.48%)</title><rect x="59.0909%" y="469" width="23.4848%" height="15" fill="rgb(254,173,49)"/><text x="59.3409%" y="479.50">__rust_try</text></g><g><title>std::panicking::try::do_call (31 samples, 23.48%)</title><rect x="59.0909%" y="453" width="23.4848%" height="15" fill="rgb(221,1,38)"/><text x="59.3409%" y="463.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (31 samples, 23.48%)</title><rect x="59.0909%" y="437" width="23.4848%" height="15" fill="rgb(206,124,46)"/><text x="59.3409%" y="447.50">&lt;core::panic::unwind_safe::AssertUnwi..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (31 samples, 23.48%)</title><rect x="59.0909%" y="421" width="23.4848%" height="15" fill="rgb(249,21,11)"/><text x="59.3409%" y="431.50">tokio::runtime::task::harness::poll_f..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (31 samples, 23.48%)</title><rect x="59.0909%" y="405" width="23.4848%" height="15" fill="rgb(222,201,40)"/><text x="59.3409%" y="415.50">tokio::runtime::task::core::CoreStage..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (31 samples, 23.48%)</title><rect x="59.0909%" y="389" width="23.4848%" height="15" fill="rgb(235,61,29)"/><text x="59.3409%" y="399.50">tokio::loom::std::unsafe_cell::Unsafe..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (31 samples, 23.48%)</title><rect x="59.0909%" y="373" width="23.4848%" height="15" fill="rgb(219,207,3)"/><text x="59.3409%" y="383.50">tokio::runtime::task::core::CoreStage..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (31 samples, 23.48%)</title><rect x="59.0909%" y="357" width="23.4848%" height="15" fill="rgb(222,56,46)"/><text x="59.3409%" y="367.50">&lt;tokio::runtime::blocking::task::Bloc..</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (31 samples, 23.48%)</title><rect x="59.0909%" y="341" width="23.4848%" height="15" fill="rgb(239,76,54)"/><text x="59.3409%" y="351.50">tokio::runtime::thread_pool::worker::..</text></g><g><title>tokio::runtime::thread_pool::worker::run (31 samples, 23.48%)</title><rect x="59.0909%" y="325" width="23.4848%" height="15" fill="rgb(231,124,27)"/><text x="59.3409%" y="335.50">tokio::runtime::thread_pool::worker::..</text></g><g><title>tokio::util::atomic_cell::AtomicCell&lt;T&gt;::take (1 samples, 0.76%)</title><rect x="81.8182%" y="309" width="0.7576%" height="15" fill="rgb(249,195,6)"/><text x="82.0682%" y="319.50"></text></g><g><title>tokio::util::atomic_cell::AtomicCell&lt;T&gt;::swap (1 samples, 0.76%)</title><rect x="81.8182%" y="293" width="0.7576%" height="15" fill="rgb(237,174,47)"/><text x="82.0682%" y="303.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (51 samples, 38.64%)</title><rect x="44.6970%" y="693" width="38.6364%" height="15" fill="rgb(206,201,31)"/><text x="44.9470%" y="703.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::fu..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (51 samples, 38.64%)</title><rect x="44.6970%" y="677" width="38.6364%" height="15" fill="rgb(231,57,52)"/><text x="44.9470%" y="687.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (51 samples, 38.64%)</title><rect x="44.6970%" y="661" width="38.6364%" height="15" fill="rgb(248,177,22)"/><text x="44.9470%" y="671.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (51 samples, 38.64%)</title><rect x="44.6970%" y="645" width="38.6364%" height="15" fill="rgb(215,211,37)"/><text x="44.9470%" y="655.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closur..</text></g><g><title>tokio::runtime::context::enter (1 samples, 0.76%)</title><rect x="82.5758%" y="629" width="0.7576%" height="15" fill="rgb(241,128,51)"/><text x="82.8258%" y="639.50"></text></g><g><title>tokio::runtime::context::try_enter (1 samples, 0.76%)</title><rect x="82.5758%" y="613" width="0.7576%" height="15" fill="rgb(227,165,31)"/><text x="82.8258%" y="623.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.76%)</title><rect x="82.5758%" y="597" width="0.7576%" height="15" fill="rgb(228,167,24)"/><text x="82.8258%" y="607.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (1 samples, 0.76%)</title><rect x="82.5758%" y="581" width="0.7576%" height="15" fill="rgb(228,143,12)"/><text x="82.8258%" y="591.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.76%)</title><rect x="82.5758%" y="565" width="0.7576%" height="15" fill="rgb(249,149,8)"/><text x="82.8258%" y="575.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.76%)</title><rect x="82.5758%" y="549" width="0.7576%" height="15" fill="rgb(243,35,44)"/><text x="82.8258%" y="559.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_register_dtor (1 samples, 0.76%)</title><rect x="82.5758%" y="533" width="0.7576%" height="15" fill="rgb(246,89,9)"/><text x="82.8258%" y="543.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.76%)</title><rect x="82.5758%" y="517" width="0.7576%" height="15" fill="rgb(233,213,13)"/><text x="82.8258%" y="527.50"></text></g><g><title>std::panic::catch_unwind (52 samples, 39.39%)</title><rect x="44.6970%" y="757" width="39.3939%" height="15" fill="rgb(233,141,41)"/><text x="44.9470%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (52 samples, 39.39%)</title><rect x="44.6970%" y="741" width="39.3939%" height="15" fill="rgb(239,167,4)"/><text x="44.9470%" y="751.50">std::panicking::try</text></g><g><title>__rust_try (52 samples, 39.39%)</title><rect x="44.6970%" y="725" width="39.3939%" height="15" fill="rgb(209,217,16)"/><text x="44.9470%" y="735.50">__rust_try</text></g><g><title>std::panicking::try::do_call (52 samples, 39.39%)</title><rect x="44.6970%" y="709" width="39.3939%" height="15" fill="rgb(219,88,35)"/><text x="44.9470%" y="719.50">std::panicking::try::do_call</text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::take (1 samples, 0.76%)</title><rect x="83.3333%" y="693" width="0.7576%" height="15" fill="rgb(220,193,23)"/><text x="83.5833%" y="703.50"></text></g><g><title>core::ptr::read (1 samples, 0.76%)</title><rect x="83.3333%" y="677" width="0.7576%" height="15" fill="rgb(230,90,52)"/><text x="83.5833%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="84.8485%" y="661" width="0.7576%" height="15" fill="rgb(252,106,19)"/><text x="85.0985%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="84.8485%" y="645" width="0.7576%" height="15" fill="rgb(206,74,20)"/><text x="85.0985%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="84.8485%" y="629" width="0.7576%" height="15" fill="rgb(230,138,44)"/><text x="85.0985%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="84.8485%" y="613" width="0.7576%" height="15" fill="rgb(235,182,43)"/><text x="85.0985%" y="623.50"></text></g><g><title>__clone3 (56 samples, 42.42%)</title><rect x="44.6970%" y="869" width="42.4242%" height="15" fill="rgb(242,16,51)"/><text x="44.9470%" y="879.50">__clone3</text></g><g><title>start_thread (56 samples, 42.42%)</title><rect x="44.6970%" y="853" width="42.4242%" height="15" fill="rgb(248,9,4)"/><text x="44.9470%" y="863.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (56 samples, 42.42%)</title><rect x="44.6970%" y="837" width="42.4242%" height="15" fill="rgb(210,31,22)"/><text x="44.9470%" y="847.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (56 samples, 42.42%)</title><rect x="44.6970%" y="821" width="42.4242%" height="15" fill="rgb(239,54,39)"/><text x="44.9470%" y="831.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_o..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (56 samples, 42.42%)</title><rect x="44.6970%" y="805" width="42.4242%" height="15" fill="rgb(230,99,41)"/><text x="44.9470%" y="815.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_o..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (56 samples, 42.42%)</title><rect x="44.6970%" y="789" width="42.4242%" height="15" fill="rgb(253,106,12)"/><text x="44.9470%" y="799.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (56 samples, 42.42%)</title><rect x="44.6970%" y="773" width="42.4242%" height="15" fill="rgb(213,46,41)"/><text x="44.9470%" y="783.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (4 samples, 3.03%)</title><rect x="84.0909%" y="757" width="3.0303%" height="15" fill="rgb(215,133,35)"/><text x="84.3409%" y="767.50">std..</text></g><g><title>__pthread_getattr_np (4 samples, 3.03%)</title><rect x="84.0909%" y="741" width="3.0303%" height="15" fill="rgb(213,28,5)"/><text x="84.3409%" y="751.50">__p..</text></g><g><title>__GI___libc_malloc (4 samples, 3.03%)</title><rect x="84.0909%" y="725" width="3.0303%" height="15" fill="rgb(215,77,49)"/><text x="84.3409%" y="735.50">__G..</text></g><g><title>tcache_init.part.0 (4 samples, 3.03%)</title><rect x="84.0909%" y="709" width="3.0303%" height="15" fill="rgb(248,100,22)"/><text x="84.3409%" y="719.50">tca..</text></g><g><title>arena_get2.part.0 (4 samples, 3.03%)</title><rect x="84.0909%" y="693" width="3.0303%" height="15" fill="rgb(208,67,9)"/><text x="84.3409%" y="703.50">are..</text></g><g><title>alloc_new_heap (3 samples, 2.27%)</title><rect x="84.8485%" y="677" width="2.2727%" height="15" fill="rgb(219,133,21)"/><text x="85.0985%" y="687.50">a..</text></g><g><title>__GI___mmap64 (2 samples, 1.52%)</title><rect x="85.6061%" y="661" width="1.5152%" height="15" fill="rgb(246,46,29)"/><text x="85.8561%" y="671.50"></text></g><g><title>[unknown] (2 samples, 1.52%)</title><rect x="85.6061%" y="645" width="1.5152%" height="15" fill="rgb(246,185,52)"/><text x="85.8561%" y="655.50"></text></g><g><title>[unknown] (2 samples, 1.52%)</title><rect x="85.6061%" y="629" width="1.5152%" height="15" fill="rgb(252,136,11)"/><text x="85.8561%" y="639.50"></text></g><g><title>[unknown] (2 samples, 1.52%)</title><rect x="85.6061%" y="613" width="1.5152%" height="15" fill="rgb(219,138,53)"/><text x="85.8561%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="86.3636%" y="597" width="0.7576%" height="15" fill="rgb(211,51,23)"/><text x="86.6136%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="86.3636%" y="581" width="0.7576%" height="15" fill="rgb(247,221,28)"/><text x="86.6136%" y="591.50"></text></g><g><title>__pthread_getaffinity_alias (1 samples, 0.76%)</title><rect x="87.1212%" y="869" width="0.7576%" height="15" fill="rgb(251,222,45)"/><text x="87.3712%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.76%)</title><rect x="87.1212%" y="853" width="0.7576%" height="15" fill="rgb(217,162,53)"/><text x="87.3712%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 1.52%)</title><rect x="87.8788%" y="869" width="1.5152%" height="15" fill="rgb(229,93,14)"/><text x="88.1288%" y="879.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (2 samples, 1.52%)</title><rect x="87.8788%" y="853" width="1.5152%" height="15" fill="rgb(209,67,49)"/><text x="88.1288%" y="863.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 1.52%)</title><rect x="87.8788%" y="837" width="1.5152%" height="15" fill="rgb(213,87,29)"/><text x="88.1288%" y="847.50"></text></g><g><title>std::panicking::try (2 samples, 1.52%)</title><rect x="87.8788%" y="821" width="1.5152%" height="15" fill="rgb(205,151,52)"/><text x="88.1288%" y="831.50"></text></g><g><title>__rust_try (2 samples, 1.52%)</title><rect x="87.8788%" y="805" width="1.5152%" height="15" fill="rgb(253,215,39)"/><text x="88.1288%" y="815.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 1.52%)</title><rect x="87.8788%" y="789" width="1.5152%" height="15" fill="rgb(221,220,41)"/><text x="88.1288%" y="799.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (2 samples, 1.52%)</title><rect x="87.8788%" y="773" width="1.5152%" height="15" fill="rgb(218,133,21)"/><text x="88.1288%" y="783.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (2 samples, 1.52%)</title><rect x="87.8788%" y="757" width="1.5152%" height="15" fill="rgb(221,193,43)"/><text x="88.1288%" y="767.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 1.52%)</title><rect x="87.8788%" y="741" width="1.5152%" height="15" fill="rgb(240,128,52)"/><text x="88.1288%" y="751.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (2 samples, 1.52%)</title><rect x="87.8788%" y="725" width="1.5152%" height="15" fill="rgb(253,114,12)"/><text x="88.1288%" y="735.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (2 samples, 1.52%)</title><rect x="87.8788%" y="709" width="1.5152%" height="15" fill="rgb(215,223,47)"/><text x="88.1288%" y="719.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (2 samples, 1.52%)</title><rect x="87.8788%" y="693" width="1.5152%" height="15" fill="rgb(248,225,23)"/><text x="88.1288%" y="703.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (2 samples, 1.52%)</title><rect x="87.8788%" y="677" width="1.5152%" height="15" fill="rgb(250,108,0)"/><text x="88.1288%" y="687.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2 samples, 1.52%)</title><rect x="87.8788%" y="661" width="1.5152%" height="15" fill="rgb(228,208,7)"/><text x="88.1288%" y="671.50"></text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 1.52%)</title><rect x="87.8788%" y="645" width="1.5152%" height="15" fill="rgb(244,45,10)"/><text x="88.1288%" y="655.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 1.52%)</title><rect x="87.8788%" y="629" width="1.5152%" height="15" fill="rgb(207,125,25)"/><text x="88.1288%" y="639.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2 samples, 1.52%)</title><rect x="87.8788%" y="613" width="1.5152%" height="15" fill="rgb(210,195,18)"/><text x="88.1288%" y="623.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2 samples, 1.52%)</title><rect x="87.8788%" y="597" width="1.5152%" height="15" fill="rgb(249,80,12)"/><text x="88.1288%" y="607.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 1.52%)</title><rect x="87.8788%" y="581" width="1.5152%" height="15" fill="rgb(221,65,9)"/><text x="88.1288%" y="591.50"></text></g><g><title>std::panicking::try (2 samples, 1.52%)</title><rect x="87.8788%" y="565" width="1.5152%" height="15" fill="rgb(235,49,36)"/><text x="88.1288%" y="575.50"></text></g><g><title>__rust_try (2 samples, 1.52%)</title><rect x="87.8788%" y="549" width="1.5152%" height="15" fill="rgb(225,32,20)"/><text x="88.1288%" y="559.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 1.52%)</title><rect x="87.8788%" y="533" width="1.5152%" height="15" fill="rgb(215,141,46)"/><text x="88.1288%" y="543.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (2 samples, 1.52%)</title><rect x="87.8788%" y="517" width="1.5152%" height="15" fill="rgb(250,160,47)"/><text x="88.1288%" y="527.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2 samples, 1.52%)</title><rect x="87.8788%" y="501" width="1.5152%" height="15" fill="rgb(216,222,40)"/><text x="88.1288%" y="511.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2 samples, 1.52%)</title><rect x="87.8788%" y="485" width="1.5152%" height="15" fill="rgb(234,217,39)"/><text x="88.1288%" y="495.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 1.52%)</title><rect x="87.8788%" y="469" width="1.5152%" height="15" fill="rgb(207,178,40)"/><text x="88.1288%" y="479.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2 samples, 1.52%)</title><rect x="87.8788%" y="453" width="1.5152%" height="15" fill="rgb(221,136,13)"/><text x="88.1288%" y="463.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 1.52%)</title><rect x="87.8788%" y="437" width="1.5152%" height="15" fill="rgb(249,199,10)"/><text x="88.1288%" y="447.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (2 samples, 1.52%)</title><rect x="87.8788%" y="421" width="1.5152%" height="15" fill="rgb(249,222,13)"/><text x="88.1288%" y="431.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (2 samples, 1.52%)</title><rect x="87.8788%" y="405" width="1.5152%" height="15" fill="rgb(244,185,38)"/><text x="88.1288%" y="415.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (2 samples, 1.52%)</title><rect x="87.8788%" y="389" width="1.5152%" height="15" fill="rgb(236,202,9)"/><text x="88.1288%" y="399.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (2 samples, 1.52%)</title><rect x="87.8788%" y="373" width="1.5152%" height="15" fill="rgb(250,229,37)"/><text x="88.1288%" y="383.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (2 samples, 1.52%)</title><rect x="87.8788%" y="357" width="1.5152%" height="15" fill="rgb(206,174,23)"/><text x="88.1288%" y="367.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (2 samples, 1.52%)</title><rect x="87.8788%" y="341" width="1.5152%" height="15" fill="rgb(211,33,43)"/><text x="88.1288%" y="351.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (2 samples, 1.52%)</title><rect x="87.8788%" y="325" width="1.5152%" height="15" fill="rgb(245,58,50)"/><text x="88.1288%" y="335.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="87.8788%" y="309" width="1.5152%" height="15" fill="rgb(244,68,36)"/><text x="88.1288%" y="319.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park (2 samples, 1.52%)</title><rect x="87.8788%" y="293" width="1.5152%" height="15" fill="rgb(232,229,15)"/><text x="88.1288%" y="303.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_driver (2 samples, 1.52%)</title><rect x="87.8788%" y="277" width="1.5152%" height="15" fill="rgb(254,30,23)"/><text x="88.1288%" y="287.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="87.8788%" y="261" width="1.5152%" height="15" fill="rgb(235,160,14)"/><text x="88.1288%" y="271.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="87.8788%" y="245" width="1.5152%" height="15" fill="rgb(212,155,44)"/><text x="88.1288%" y="255.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="87.8788%" y="229" width="1.5152%" height="15" fill="rgb(226,2,50)"/><text x="88.1288%" y="239.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (2 samples, 1.52%)</title><rect x="87.8788%" y="213" width="1.5152%" height="15" fill="rgb(234,177,6)"/><text x="88.1288%" y="223.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="87.8788%" y="197" width="1.5152%" height="15" fill="rgb(217,24,9)"/><text x="88.1288%" y="207.50"></text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="87.8788%" y="181" width="1.5152%" height="15" fill="rgb(220,13,46)"/><text x="88.1288%" y="191.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="87.8788%" y="165" width="1.5152%" height="15" fill="rgb(239,221,27)"/><text x="88.1288%" y="175.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="87.8788%" y="149" width="1.5152%" height="15" fill="rgb(222,198,25)"/><text x="88.1288%" y="159.50"></text></g><g><title>tokio::io::driver::Driver::turn (2 samples, 1.52%)</title><rect x="87.8788%" y="133" width="1.5152%" height="15" fill="rgb(211,99,13)"/><text x="88.1288%" y="143.50"></text></g><g><title>mio::poll::Poll::poll (2 samples, 1.52%)</title><rect x="87.8788%" y="117" width="1.5152%" height="15" fill="rgb(232,111,31)"/><text x="88.1288%" y="127.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (2 samples, 1.52%)</title><rect x="87.8788%" y="101" width="1.5152%" height="15" fill="rgb(245,82,37)"/><text x="88.1288%" y="111.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 1.52%)</title><rect x="87.8788%" y="85" width="1.5152%" height="15" fill="rgb(227,149,46)"/><text x="88.1288%" y="95.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::{{closure}} (2 samples, 1.52%)</title><rect x="87.8788%" y="69" width="1.5152%" height="15" fill="rgb(218,36,50)"/><text x="88.1288%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 1.52%)</title><rect x="87.8788%" y="53" width="1.5152%" height="15" fill="rgb(226,80,48)"/><text x="88.1288%" y="63.50"></text></g><g><title>mining_proxy::lib::upstream_mining::UpstreamMiningNode::connect::{{closure}} (1 samples, 0.76%)</title><rect x="89.3939%" y="869" width="0.7576%" height="15" fill="rgb(238,224,15)"/><text x="89.6439%" y="879.50"></text></g><g><title>noise_sv2::Initiator::from_raw_k (1 samples, 0.76%)</title><rect x="89.3939%" y="853" width="0.7576%" height="15" fill="rgb(241,136,10)"/><text x="89.6439%" y="863.50"></text></g><g><title>ed25519_dalek::public::PublicKey::from_bytes (1 samples, 0.76%)</title><rect x="89.3939%" y="837" width="0.7576%" height="15" fill="rgb(208,32,45)"/><text x="89.6439%" y="847.50"></text></g><g><title>curve25519_dalek::edwards::CompressedEdwardsY::decompress (1 samples, 0.76%)</title><rect x="89.3939%" y="821" width="0.7576%" height="15" fill="rgb(207,135,9)"/><text x="89.6439%" y="831.50"></text></g><g><title>curve25519_dalek::field::&lt;impl curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;::sqrt_ratio_i (1 samples, 0.76%)</title><rect x="89.3939%" y="805" width="0.7576%" height="15" fill="rgb(206,86,44)"/><text x="89.6439%" y="815.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Mul&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::mul (1 samples, 0.76%)</title><rect x="89.3939%" y="789" width="0.7576%" height="15" fill="rgb(245,177,15)"/><text x="89.6439%" y="799.50"></text></g><g><title>__memmove_avx_unaligned (1 samples, 0.76%)</title><rect x="89.3939%" y="773" width="0.7576%" height="15" fill="rgb(206,64,50)"/><text x="89.6439%" y="783.50"></text></g><g><title>start_thread (2 samples, 1.52%)</title><rect x="90.1515%" y="869" width="1.5152%" height="15" fill="rgb(234,36,40)"/><text x="90.4015%" y="879.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 1.52%)</title><rect x="90.1515%" y="853" width="1.5152%" height="15" fill="rgb(213,64,8)"/><text x="90.4015%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 1.52%)</title><rect x="90.1515%" y="837" width="1.5152%" height="15" fill="rgb(210,75,36)"/><text x="90.4015%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 1.52%)</title><rect x="90.1515%" y="821" width="1.5152%" height="15" fill="rgb(229,88,21)"/><text x="90.4015%" y="831.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 1.52%)</title><rect x="90.1515%" y="805" width="1.5152%" height="15" fill="rgb(252,204,47)"/><text x="90.4015%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (2 samples, 1.52%)</title><rect x="90.1515%" y="789" width="1.5152%" height="15" fill="rgb(208,77,27)"/><text x="90.4015%" y="799.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 1.52%)</title><rect x="90.1515%" y="773" width="1.5152%" height="15" fill="rgb(221,76,26)"/><text x="90.4015%" y="783.50"></text></g><g><title>std::panicking::try (2 samples, 1.52%)</title><rect x="90.1515%" y="757" width="1.5152%" height="15" fill="rgb(225,139,18)"/><text x="90.4015%" y="767.50"></text></g><g><title>__rust_try (2 samples, 1.52%)</title><rect x="90.1515%" y="741" width="1.5152%" height="15" fill="rgb(230,137,11)"/><text x="90.4015%" y="751.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 1.52%)</title><rect x="90.1515%" y="725" width="1.5152%" height="15" fill="rgb(212,28,1)"/><text x="90.4015%" y="735.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (2 samples, 1.52%)</title><rect x="90.1515%" y="709" width="1.5152%" height="15" fill="rgb(248,164,17)"/><text x="90.4015%" y="719.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (2 samples, 1.52%)</title><rect x="90.1515%" y="693" width="1.5152%" height="15" fill="rgb(222,171,42)"/><text x="90.4015%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 1.52%)</title><rect x="90.1515%" y="677" width="1.5152%" height="15" fill="rgb(243,84,45)"/><text x="90.4015%" y="687.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (2 samples, 1.52%)</title><rect x="90.1515%" y="661" width="1.5152%" height="15" fill="rgb(252,49,23)"/><text x="90.4015%" y="671.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (2 samples, 1.52%)</title><rect x="90.1515%" y="645" width="1.5152%" height="15" fill="rgb(215,19,7)"/><text x="90.4015%" y="655.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (2 samples, 1.52%)</title><rect x="90.1515%" y="629" width="1.5152%" height="15" fill="rgb(238,81,41)"/><text x="90.4015%" y="639.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (2 samples, 1.52%)</title><rect x="90.1515%" y="613" width="1.5152%" height="15" fill="rgb(210,199,37)"/><text x="90.4015%" y="623.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2 samples, 1.52%)</title><rect x="90.1515%" y="597" width="1.5152%" height="15" fill="rgb(244,192,49)"/><text x="90.4015%" y="607.50"></text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 1.52%)</title><rect x="90.1515%" y="581" width="1.5152%" height="15" fill="rgb(226,211,11)"/><text x="90.4015%" y="591.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 1.52%)</title><rect x="90.1515%" y="565" width="1.5152%" height="15" fill="rgb(236,162,54)"/><text x="90.4015%" y="575.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2 samples, 1.52%)</title><rect x="90.1515%" y="549" width="1.5152%" height="15" fill="rgb(220,229,9)"/><text x="90.4015%" y="559.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2 samples, 1.52%)</title><rect x="90.1515%" y="533" width="1.5152%" height="15" fill="rgb(250,87,22)"/><text x="90.4015%" y="543.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 1.52%)</title><rect x="90.1515%" y="517" width="1.5152%" height="15" fill="rgb(239,43,17)"/><text x="90.4015%" y="527.50"></text></g><g><title>std::panicking::try (2 samples, 1.52%)</title><rect x="90.1515%" y="501" width="1.5152%" height="15" fill="rgb(231,177,25)"/><text x="90.4015%" y="511.50"></text></g><g><title>__rust_try (2 samples, 1.52%)</title><rect x="90.1515%" y="485" width="1.5152%" height="15" fill="rgb(219,179,1)"/><text x="90.4015%" y="495.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 1.52%)</title><rect x="90.1515%" y="469" width="1.5152%" height="15" fill="rgb(238,219,53)"/><text x="90.4015%" y="479.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (2 samples, 1.52%)</title><rect x="90.1515%" y="453" width="1.5152%" height="15" fill="rgb(232,167,36)"/><text x="90.4015%" y="463.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2 samples, 1.52%)</title><rect x="90.1515%" y="437" width="1.5152%" height="15" fill="rgb(244,19,51)"/><text x="90.4015%" y="447.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2 samples, 1.52%)</title><rect x="90.1515%" y="421" width="1.5152%" height="15" fill="rgb(224,6,22)"/><text x="90.4015%" y="431.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 1.52%)</title><rect x="90.1515%" y="405" width="1.5152%" height="15" fill="rgb(224,145,5)"/><text x="90.4015%" y="415.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2 samples, 1.52%)</title><rect x="90.1515%" y="389" width="1.5152%" height="15" fill="rgb(234,130,49)"/><text x="90.4015%" y="399.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 1.52%)</title><rect x="90.1515%" y="373" width="1.5152%" height="15" fill="rgb(254,6,2)"/><text x="90.4015%" y="383.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (2 samples, 1.52%)</title><rect x="90.1515%" y="357" width="1.5152%" height="15" fill="rgb(208,96,46)"/><text x="90.4015%" y="367.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (2 samples, 1.52%)</title><rect x="90.1515%" y="341" width="1.5152%" height="15" fill="rgb(239,3,39)"/><text x="90.4015%" y="351.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (2 samples, 1.52%)</title><rect x="90.1515%" y="325" width="1.5152%" height="15" fill="rgb(233,210,1)"/><text x="90.4015%" y="335.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (2 samples, 1.52%)</title><rect x="90.1515%" y="309" width="1.5152%" height="15" fill="rgb(244,137,37)"/><text x="90.4015%" y="319.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (2 samples, 1.52%)</title><rect x="90.1515%" y="293" width="1.5152%" height="15" fill="rgb(240,136,2)"/><text x="90.4015%" y="303.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (2 samples, 1.52%)</title><rect x="90.1515%" y="277" width="1.5152%" height="15" fill="rgb(239,18,37)"/><text x="90.4015%" y="287.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (2 samples, 1.52%)</title><rect x="90.1515%" y="261" width="1.5152%" height="15" fill="rgb(218,185,22)"/><text x="90.4015%" y="271.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="90.1515%" y="245" width="1.5152%" height="15" fill="rgb(225,218,4)"/><text x="90.4015%" y="255.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park (2 samples, 1.52%)</title><rect x="90.1515%" y="229" width="1.5152%" height="15" fill="rgb(230,182,32)"/><text x="90.4015%" y="239.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_driver (2 samples, 1.52%)</title><rect x="90.1515%" y="213" width="1.5152%" height="15" fill="rgb(242,56,43)"/><text x="90.4015%" y="223.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="90.1515%" y="197" width="1.5152%" height="15" fill="rgb(233,99,24)"/><text x="90.4015%" y="207.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="90.1515%" y="181" width="1.5152%" height="15" fill="rgb(234,209,42)"/><text x="90.4015%" y="191.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="90.1515%" y="165" width="1.5152%" height="15" fill="rgb(227,7,12)"/><text x="90.4015%" y="175.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (2 samples, 1.52%)</title><rect x="90.1515%" y="149" width="1.5152%" height="15" fill="rgb(245,203,43)"/><text x="90.4015%" y="159.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="90.1515%" y="133" width="1.5152%" height="15" fill="rgb(238,205,33)"/><text x="90.4015%" y="143.50"></text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="90.1515%" y="117" width="1.5152%" height="15" fill="rgb(231,56,7)"/><text x="90.4015%" y="127.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="90.1515%" y="101" width="1.5152%" height="15" fill="rgb(244,186,29)"/><text x="90.4015%" y="111.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="90.1515%" y="85" width="1.5152%" height="15" fill="rgb(234,111,31)"/><text x="90.4015%" y="95.50"></text></g><g><title>tokio::io::driver::Driver::turn (2 samples, 1.52%)</title><rect x="90.1515%" y="69" width="1.5152%" height="15" fill="rgb(241,149,10)"/><text x="90.4015%" y="79.50"></text></g><g><title>mio::poll::Poll::poll (2 samples, 1.52%)</title><rect x="90.1515%" y="53" width="1.5152%" height="15" fill="rgb(249,206,44)"/><text x="90.4015%" y="63.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (2 samples, 1.52%)</title><rect x="90.1515%" y="37" width="1.5152%" height="15" fill="rgb(251,153,30)"/><text x="90.4015%" y="47.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.76%)</title><rect x="91.6667%" y="869" width="0.7576%" height="15" fill="rgb(239,152,38)"/><text x="91.9167%" y="879.50"></text></g><g><title>std::panicking::try (1 samples, 0.76%)</title><rect x="91.6667%" y="853" width="0.7576%" height="15" fill="rgb(249,139,47)"/><text x="91.9167%" y="863.50"></text></g><g><title>__rust_try (1 samples, 0.76%)</title><rect x="91.6667%" y="837" width="0.7576%" height="15" fill="rgb(244,64,35)"/><text x="91.9167%" y="847.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.76%)</title><rect x="91.6667%" y="821" width="0.7576%" height="15" fill="rgb(216,46,15)"/><text x="91.9167%" y="831.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (1 samples, 0.76%)</title><rect x="91.6667%" y="805" width="0.7576%" height="15" fill="rgb(250,74,19)"/><text x="91.9167%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (1 samples, 0.76%)</title><rect x="91.6667%" y="789" width="0.7576%" height="15" fill="rgb(249,42,33)"/><text x="91.9167%" y="799.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.76%)</title><rect x="91.6667%" y="773" width="0.7576%" height="15" fill="rgb(242,149,17)"/><text x="91.9167%" y="783.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1 samples, 0.76%)</title><rect x="91.6667%" y="757" width="0.7576%" height="15" fill="rgb(244,29,21)"/><text x="91.9167%" y="767.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.76%)</title><rect x="91.6667%" y="741" width="0.7576%" height="15" fill="rgb(220,130,37)"/><text x="91.9167%" y="751.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (1 samples, 0.76%)</title><rect x="91.6667%" y="725" width="0.7576%" height="15" fill="rgb(211,67,2)"/><text x="91.9167%" y="735.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (1 samples, 0.76%)</title><rect x="91.6667%" y="709" width="0.7576%" height="15" fill="rgb(235,68,52)"/><text x="91.9167%" y="719.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1 samples, 0.76%)</title><rect x="91.6667%" y="693" width="0.7576%" height="15" fill="rgb(246,142,3)"/><text x="91.9167%" y="703.50"></text></g><g><title>tokio::runtime::task::raw::poll (1 samples, 0.76%)</title><rect x="91.6667%" y="677" width="0.7576%" height="15" fill="rgb(241,25,7)"/><text x="91.9167%" y="687.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.76%)</title><rect x="91.6667%" y="661" width="0.7576%" height="15" fill="rgb(242,119,39)"/><text x="91.9167%" y="671.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.76%)</title><rect x="91.6667%" y="645" width="0.7576%" height="15" fill="rgb(241,98,45)"/><text x="91.9167%" y="655.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.76%)</title><rect x="91.6667%" y="629" width="0.7576%" height="15" fill="rgb(254,28,30)"/><text x="91.9167%" y="639.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.76%)</title><rect x="91.6667%" y="613" width="0.7576%" height="15" fill="rgb(241,142,54)"/><text x="91.9167%" y="623.50"></text></g><g><title>std::panicking::try (1 samples, 0.76%)</title><rect x="91.6667%" y="597" width="0.7576%" height="15" fill="rgb(222,85,15)"/><text x="91.9167%" y="607.50"></text></g><g><title>__rust_try (1 samples, 0.76%)</title><rect x="91.6667%" y="581" width="0.7576%" height="15" fill="rgb(210,85,47)"/><text x="91.9167%" y="591.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.76%)</title><rect x="91.6667%" y="565" width="0.7576%" height="15" fill="rgb(224,206,25)"/><text x="91.9167%" y="575.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (1 samples, 0.76%)</title><rect x="91.6667%" y="549" width="0.7576%" height="15" fill="rgb(243,201,19)"/><text x="91.9167%" y="559.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.76%)</title><rect x="91.6667%" y="533" width="0.7576%" height="15" fill="rgb(236,59,4)"/><text x="91.9167%" y="543.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.76%)</title><rect x="91.6667%" y="517" width="0.7576%" height="15" fill="rgb(254,179,45)"/><text x="91.9167%" y="527.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.76%)</title><rect x="91.6667%" y="501" width="0.7576%" height="15" fill="rgb(226,14,10)"/><text x="91.9167%" y="511.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.76%)</title><rect x="91.6667%" y="485" width="0.7576%" height="15" fill="rgb(244,27,41)"/><text x="91.9167%" y="495.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.76%)</title><rect x="91.6667%" y="469" width="0.7576%" height="15" fill="rgb(235,35,32)"/><text x="91.9167%" y="479.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (1 samples, 0.76%)</title><rect x="91.6667%" y="453" width="0.7576%" height="15" fill="rgb(218,68,31)"/><text x="91.9167%" y="463.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (1 samples, 0.76%)</title><rect x="91.6667%" y="437" width="0.7576%" height="15" fill="rgb(207,120,37)"/><text x="91.9167%" y="447.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1 samples, 0.76%)</title><rect x="91.6667%" y="421" width="0.7576%" height="15" fill="rgb(227,98,0)"/><text x="91.9167%" y="431.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1 samples, 0.76%)</title><rect x="91.6667%" y="405" width="0.7576%" height="15" fill="rgb(207,7,3)"/><text x="91.9167%" y="415.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1 samples, 0.76%)</title><rect x="91.6667%" y="389" width="0.7576%" height="15" fill="rgb(206,98,19)"/><text x="91.9167%" y="399.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (1 samples, 0.76%)</title><rect x="91.6667%" y="373" width="0.7576%" height="15" fill="rgb(217,5,26)"/><text x="91.9167%" y="383.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (1 samples, 0.76%)</title><rect x="91.6667%" y="357" width="0.7576%" height="15" fill="rgb(235,190,38)"/><text x="91.9167%" y="367.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="91.6667%" y="341" width="0.7576%" height="15" fill="rgb(247,86,24)"/><text x="91.9167%" y="351.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park (1 samples, 0.76%)</title><rect x="91.6667%" y="325" width="0.7576%" height="15" fill="rgb(205,101,16)"/><text x="91.9167%" y="335.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_driver (1 samples, 0.76%)</title><rect x="91.6667%" y="309" width="0.7576%" height="15" fill="rgb(246,168,33)"/><text x="91.9167%" y="319.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="91.6667%" y="293" width="0.7576%" height="15" fill="rgb(231,114,1)"/><text x="91.9167%" y="303.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="91.6667%" y="277" width="0.7576%" height="15" fill="rgb(207,184,53)"/><text x="91.9167%" y="287.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="91.6667%" y="261" width="0.7576%" height="15" fill="rgb(224,95,51)"/><text x="91.9167%" y="271.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (1 samples, 0.76%)</title><rect x="91.6667%" y="245" width="0.7576%" height="15" fill="rgb(212,188,45)"/><text x="91.9167%" y="255.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_timeout (1 samples, 0.76%)</title><rect x="91.6667%" y="229" width="0.7576%" height="15" fill="rgb(223,154,38)"/><text x="91.9167%" y="239.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (1 samples, 0.76%)</title><rect x="91.6667%" y="213" width="0.7576%" height="15" fill="rgb(251,22,52)"/><text x="91.9167%" y="223.50"></text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (1 samples, 0.76%)</title><rect x="91.6667%" y="197" width="0.7576%" height="15" fill="rgb(229,209,22)"/><text x="91.9167%" y="207.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park_timeout (1 samples, 0.76%)</title><rect x="91.6667%" y="181" width="0.7576%" height="15" fill="rgb(234,138,34)"/><text x="91.9167%" y="191.50"></text></g><g><title>tokio::signal::unix::driver::Driver::process (1 samples, 0.76%)</title><rect x="91.6667%" y="165" width="0.7576%" height="15" fill="rgb(212,95,11)"/><text x="91.9167%" y="175.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_ready (1 samples, 0.76%)</title><rect x="91.6667%" y="149" width="0.7576%" height="15" fill="rgb(240,179,47)"/><text x="91.9167%" y="159.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (1 samples, 0.76%)</title><rect x="91.6667%" y="133" width="0.7576%" height="15" fill="rgb(240,163,11)"/><text x="91.9167%" y="143.50"></text></g><g><title>tokio::coop::poll_proceed (1 samples, 0.76%)</title><rect x="91.6667%" y="117" width="0.7576%" height="15" fill="rgb(236,37,12)"/><text x="91.9167%" y="127.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.76%)</title><rect x="91.6667%" y="101" width="0.7576%" height="15" fill="rgb(232,164,16)"/><text x="91.9167%" y="111.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.76%)</title><rect x="91.6667%" y="85" width="0.7576%" height="15" fill="rgb(244,205,15)"/><text x="91.9167%" y="95.50"></text></g><g><title>tokio::coop::poll_proceed::{{closure}} (1 samples, 0.76%)</title><rect x="91.6667%" y="69" width="0.7576%" height="15" fill="rgb(223,117,47)"/><text x="91.9167%" y="79.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.76%)</title><rect x="91.6667%" y="53" width="0.7576%" height="15" fill="rgb(244,107,35)"/><text x="91.9167%" y="63.50"></text></g><g><title>core::mem::drop (1 samples, 0.76%)</title><rect x="91.6667%" y="37" width="0.7576%" height="15" fill="rgb(205,140,8)"/><text x="91.9167%" y="47.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="92.4242%" y="277" width="0.7576%" height="15" fill="rgb(228,84,46)"/><text x="92.6742%" y="287.50"></text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="92.4242%" y="261" width="0.7576%" height="15" fill="rgb(254,188,9)"/><text x="92.6742%" y="271.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="92.4242%" y="245" width="0.7576%" height="15" fill="rgb(206,112,54)"/><text x="92.6742%" y="255.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="92.4242%" y="229" width="0.7576%" height="15" fill="rgb(216,84,49)"/><text x="92.6742%" y="239.50"></text></g><g><title>tokio::io::driver::Driver::turn (1 samples, 0.76%)</title><rect x="92.4242%" y="213" width="0.7576%" height="15" fill="rgb(214,194,35)"/><text x="92.6742%" y="223.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (1 samples, 0.76%)</title><rect x="92.4242%" y="197" width="0.7576%" height="15" fill="rgb(249,28,3)"/><text x="92.6742%" y="207.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (1 samples, 0.76%)</title><rect x="92.4242%" y="181" width="0.7576%" height="15" fill="rgb(222,56,52)"/><text x="92.6742%" y="191.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (1 samples, 0.76%)</title><rect x="92.4242%" y="165" width="0.7576%" height="15" fill="rgb(245,217,50)"/><text x="92.6742%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.76%)</title><rect x="92.4242%" y="149" width="0.7576%" height="15" fill="rgb(213,201,24)"/><text x="92.6742%" y="159.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 1.52%)</title><rect x="92.4242%" y="869" width="1.5152%" height="15" fill="rgb(248,116,28)"/><text x="92.6742%" y="879.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (2 samples, 1.52%)</title><rect x="92.4242%" y="853" width="1.5152%" height="15" fill="rgb(219,72,43)"/><text x="92.6742%" y="863.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (2 samples, 1.52%)</title><rect x="92.4242%" y="837" width="1.5152%" height="15" fill="rgb(209,138,14)"/><text x="92.6742%" y="847.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 1.52%)</title><rect x="92.4242%" y="821" width="1.5152%" height="15" fill="rgb(222,18,33)"/><text x="92.6742%" y="831.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (2 samples, 1.52%)</title><rect x="92.4242%" y="805" width="1.5152%" height="15" fill="rgb(213,199,7)"/><text x="92.6742%" y="815.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (2 samples, 1.52%)</title><rect x="92.4242%" y="789" width="1.5152%" height="15" fill="rgb(250,110,10)"/><text x="92.6742%" y="799.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (2 samples, 1.52%)</title><rect x="92.4242%" y="773" width="1.5152%" height="15" fill="rgb(248,123,6)"/><text x="92.6742%" y="783.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (2 samples, 1.52%)</title><rect x="92.4242%" y="757" width="1.5152%" height="15" fill="rgb(206,91,31)"/><text x="92.6742%" y="767.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2 samples, 1.52%)</title><rect x="92.4242%" y="741" width="1.5152%" height="15" fill="rgb(211,154,13)"/><text x="92.6742%" y="751.50"></text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 1.52%)</title><rect x="92.4242%" y="725" width="1.5152%" height="15" fill="rgb(225,148,7)"/><text x="92.6742%" y="735.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 1.52%)</title><rect x="92.4242%" y="709" width="1.5152%" height="15" fill="rgb(220,160,43)"/><text x="92.6742%" y="719.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2 samples, 1.52%)</title><rect x="92.4242%" y="693" width="1.5152%" height="15" fill="rgb(213,52,39)"/><text x="92.6742%" y="703.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (2 samples, 1.52%)</title><rect x="92.4242%" y="677" width="1.5152%" height="15" fill="rgb(243,137,7)"/><text x="92.6742%" y="687.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 1.52%)</title><rect x="92.4242%" y="661" width="1.5152%" height="15" fill="rgb(230,79,13)"/><text x="92.6742%" y="671.50"></text></g><g><title>std::panicking::try (2 samples, 1.52%)</title><rect x="92.4242%" y="645" width="1.5152%" height="15" fill="rgb(247,105,23)"/><text x="92.6742%" y="655.50"></text></g><g><title>__rust_try (2 samples, 1.52%)</title><rect x="92.4242%" y="629" width="1.5152%" height="15" fill="rgb(223,179,41)"/><text x="92.6742%" y="639.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 1.52%)</title><rect x="92.4242%" y="613" width="1.5152%" height="15" fill="rgb(218,9,34)"/><text x="92.6742%" y="623.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (2 samples, 1.52%)</title><rect x="92.4242%" y="597" width="1.5152%" height="15" fill="rgb(222,106,8)"/><text x="92.6742%" y="607.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (2 samples, 1.52%)</title><rect x="92.4242%" y="581" width="1.5152%" height="15" fill="rgb(211,220,0)"/><text x="92.6742%" y="591.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2 samples, 1.52%)</title><rect x="92.4242%" y="565" width="1.5152%" height="15" fill="rgb(229,52,16)"/><text x="92.6742%" y="575.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 1.52%)</title><rect x="92.4242%" y="549" width="1.5152%" height="15" fill="rgb(212,155,18)"/><text x="92.6742%" y="559.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (2 samples, 1.52%)</title><rect x="92.4242%" y="533" width="1.5152%" height="15" fill="rgb(242,21,14)"/><text x="92.6742%" y="543.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 1.52%)</title><rect x="92.4242%" y="517" width="1.5152%" height="15" fill="rgb(222,19,48)"/><text x="92.6742%" y="527.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (2 samples, 1.52%)</title><rect x="92.4242%" y="501" width="1.5152%" height="15" fill="rgb(232,45,27)"/><text x="92.6742%" y="511.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (2 samples, 1.52%)</title><rect x="92.4242%" y="485" width="1.5152%" height="15" fill="rgb(249,103,42)"/><text x="92.6742%" y="495.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (2 samples, 1.52%)</title><rect x="92.4242%" y="469" width="1.5152%" height="15" fill="rgb(246,81,33)"/><text x="92.6742%" y="479.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (2 samples, 1.52%)</title><rect x="92.4242%" y="453" width="1.5152%" height="15" fill="rgb(252,33,42)"/><text x="92.6742%" y="463.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (2 samples, 1.52%)</title><rect x="92.4242%" y="437" width="1.5152%" height="15" fill="rgb(209,212,41)"/><text x="92.6742%" y="447.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (2 samples, 1.52%)</title><rect x="92.4242%" y="421" width="1.5152%" height="15" fill="rgb(207,154,6)"/><text x="92.6742%" y="431.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (2 samples, 1.52%)</title><rect x="92.4242%" y="405" width="1.5152%" height="15" fill="rgb(223,64,47)"/><text x="92.6742%" y="415.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="92.4242%" y="389" width="1.5152%" height="15" fill="rgb(211,161,38)"/><text x="92.6742%" y="399.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park (2 samples, 1.52%)</title><rect x="92.4242%" y="373" width="1.5152%" height="15" fill="rgb(219,138,40)"/><text x="92.6742%" y="383.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_driver (2 samples, 1.52%)</title><rect x="92.4242%" y="357" width="1.5152%" height="15" fill="rgb(241,228,46)"/><text x="92.6742%" y="367.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="92.4242%" y="341" width="1.5152%" height="15" fill="rgb(223,209,38)"/><text x="92.6742%" y="351.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="92.4242%" y="325" width="1.5152%" height="15" fill="rgb(236,164,45)"/><text x="92.6742%" y="335.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="92.4242%" y="309" width="1.5152%" height="15" fill="rgb(231,15,5)"/><text x="92.6742%" y="319.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (2 samples, 1.52%)</title><rect x="92.4242%" y="293" width="1.5152%" height="15" fill="rgb(252,35,15)"/><text x="92.6742%" y="303.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_timeout (1 samples, 0.76%)</title><rect x="93.1818%" y="277" width="0.7576%" height="15" fill="rgb(248,181,18)"/><text x="93.4318%" y="287.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (1 samples, 0.76%)</title><rect x="93.1818%" y="261" width="0.7576%" height="15" fill="rgb(233,39,42)"/><text x="93.4318%" y="271.50"></text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (1 samples, 0.76%)</title><rect x="93.1818%" y="245" width="0.7576%" height="15" fill="rgb(238,110,33)"/><text x="93.4318%" y="255.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park_timeout (1 samples, 0.76%)</title><rect x="93.1818%" y="229" width="0.7576%" height="15" fill="rgb(233,195,10)"/><text x="93.4318%" y="239.50"></text></g><g><title>tokio::signal::unix::driver::Driver::process (1 samples, 0.76%)</title><rect x="93.1818%" y="213" width="0.7576%" height="15" fill="rgb(254,105,3)"/><text x="93.4318%" y="223.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_ready (1 samples, 0.76%)</title><rect x="93.1818%" y="197" width="0.7576%" height="15" fill="rgb(221,225,9)"/><text x="93.4318%" y="207.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (1 samples, 0.76%)</title><rect x="93.1818%" y="181" width="0.7576%" height="15" fill="rgb(224,227,45)"/><text x="93.4318%" y="191.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.76%)</title><rect x="93.1818%" y="165" width="0.7576%" height="15" fill="rgb(229,198,43)"/><text x="93.4318%" y="175.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.76%)</title><rect x="93.1818%" y="149" width="0.7576%" height="15" fill="rgb(206,209,35)"/><text x="93.4318%" y="159.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.76%)</title><rect x="93.1818%" y="133" width="0.7576%" height="15" fill="rgb(245,195,53)"/><text x="93.4318%" y="143.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.76%)</title><rect x="93.1818%" y="117" width="0.7576%" height="15" fill="rgb(240,92,26)"/><text x="93.4318%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (1 samples, 0.76%)</title><rect x="93.1818%" y="101" width="0.7576%" height="15" fill="rgb(207,40,23)"/><text x="93.4318%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.76%)</title><rect x="93.1818%" y="85" width="0.7576%" height="15" fill="rgb(223,111,35)"/><text x="93.4318%" y="95.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="93.9394%" y="149" width="1.5152%" height="15" fill="rgb(229,147,28)"/><text x="94.1894%" y="159.50"></text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="93.9394%" y="133" width="1.5152%" height="15" fill="rgb(211,29,28)"/><text x="94.1894%" y="143.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="93.9394%" y="117" width="1.5152%" height="15" fill="rgb(228,72,33)"/><text x="94.1894%" y="127.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (2 samples, 1.52%)</title><rect x="93.9394%" y="101" width="1.5152%" height="15" fill="rgb(205,214,31)"/><text x="94.1894%" y="111.50"></text></g><g><title>tokio::io::driver::Driver::turn (2 samples, 1.52%)</title><rect x="93.9394%" y="85" width="1.5152%" height="15" fill="rgb(224,111,15)"/><text x="94.1894%" y="95.50"></text></g><g><title>mio::poll::Poll::poll (2 samples, 1.52%)</title><rect x="93.9394%" y="69" width="1.5152%" height="15" fill="rgb(253,21,26)"/><text x="94.1894%" y="79.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (2 samples, 1.52%)</title><rect x="93.9394%" y="53" width="1.5152%" height="15" fill="rgb(245,139,43)"/><text x="94.1894%" y="63.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 1.52%)</title><rect x="93.9394%" y="37" width="1.5152%" height="15" fill="rgb(252,170,7)"/><text x="94.1894%" y="47.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3 samples, 2.27%)</title><rect x="93.9394%" y="869" width="2.2727%" height="15" fill="rgb(231,118,14)"/><text x="94.1894%" y="879.50">s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 2.27%)</title><rect x="93.9394%" y="853" width="2.2727%" height="15" fill="rgb(238,83,0)"/><text x="94.1894%" y="863.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 2.27%)</title><rect x="93.9394%" y="837" width="2.2727%" height="15" fill="rgb(221,39,39)"/><text x="94.1894%" y="847.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 2.27%)</title><rect x="93.9394%" y="821" width="2.2727%" height="15" fill="rgb(222,119,46)"/><text x="94.1894%" y="831.50">c..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (3 samples, 2.27%)</title><rect x="93.9394%" y="805" width="2.2727%" height="15" fill="rgb(222,165,49)"/><text x="94.1894%" y="815.50">s..</text></g><g><title>std::panic::catch_unwind (3 samples, 2.27%)</title><rect x="93.9394%" y="789" width="2.2727%" height="15" fill="rgb(219,113,52)"/><text x="94.1894%" y="799.50">s..</text></g><g><title>std::panicking::try (3 samples, 2.27%)</title><rect x="93.9394%" y="773" width="2.2727%" height="15" fill="rgb(214,7,15)"/><text x="94.1894%" y="783.50">s..</text></g><g><title>__rust_try (3 samples, 2.27%)</title><rect x="93.9394%" y="757" width="2.2727%" height="15" fill="rgb(235,32,4)"/><text x="94.1894%" y="767.50">_..</text></g><g><title>std::panicking::try::do_call (3 samples, 2.27%)</title><rect x="93.9394%" y="741" width="2.2727%" height="15" fill="rgb(238,90,54)"/><text x="94.1894%" y="751.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (3 samples, 2.27%)</title><rect x="93.9394%" y="725" width="2.2727%" height="15" fill="rgb(213,208,19)"/><text x="94.1894%" y="735.50">&lt;..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (3 samples, 2.27%)</title><rect x="93.9394%" y="709" width="2.2727%" height="15" fill="rgb(233,156,4)"/><text x="94.1894%" y="719.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 2.27%)</title><rect x="93.9394%" y="693" width="2.2727%" height="15" fill="rgb(207,194,5)"/><text x="94.1894%" y="703.50">s..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (3 samples, 2.27%)</title><rect x="93.9394%" y="677" width="2.2727%" height="15" fill="rgb(206,111,30)"/><text x="94.1894%" y="687.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (3 samples, 2.27%)</title><rect x="93.9394%" y="661" width="2.2727%" height="15" fill="rgb(243,70,54)"/><text x="94.1894%" y="671.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (3 samples, 2.27%)</title><rect x="93.9394%" y="645" width="2.2727%" height="15" fill="rgb(242,28,8)"/><text x="94.1894%" y="655.50">t..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (3 samples, 2.27%)</title><rect x="93.9394%" y="629" width="2.2727%" height="15" fill="rgb(219,106,18)"/><text x="94.1894%" y="639.50">t..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (3 samples, 2.27%)</title><rect x="93.9394%" y="613" width="2.2727%" height="15" fill="rgb(244,222,10)"/><text x="94.1894%" y="623.50">t..</text></g><g><title>tokio::runtime::task::raw::poll (3 samples, 2.27%)</title><rect x="93.9394%" y="597" width="2.2727%" height="15" fill="rgb(236,179,52)"/><text x="94.1894%" y="607.50">t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3 samples, 2.27%)</title><rect x="93.9394%" y="581" width="2.2727%" height="15" fill="rgb(213,23,39)"/><text x="94.1894%" y="591.50">t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (3 samples, 2.27%)</title><rect x="93.9394%" y="565" width="2.2727%" height="15" fill="rgb(238,48,10)"/><text x="94.1894%" y="575.50">t..</text></g><g><title>tokio::runtime::task::harness::poll_future (3 samples, 2.27%)</title><rect x="93.9394%" y="549" width="2.2727%" height="15" fill="rgb(251,196,23)"/><text x="94.1894%" y="559.50">t..</text></g><g><title>std::panic::catch_unwind (3 samples, 2.27%)</title><rect x="93.9394%" y="533" width="2.2727%" height="15" fill="rgb(250,152,24)"/><text x="94.1894%" y="543.50">s..</text></g><g><title>std::panicking::try (3 samples, 2.27%)</title><rect x="93.9394%" y="517" width="2.2727%" height="15" fill="rgb(209,150,17)"/><text x="94.1894%" y="527.50">s..</text></g><g><title>__rust_try (3 samples, 2.27%)</title><rect x="93.9394%" y="501" width="2.2727%" height="15" fill="rgb(234,202,34)"/><text x="94.1894%" y="511.50">_..</text></g><g><title>std::panicking::try::do_call (3 samples, 2.27%)</title><rect x="93.9394%" y="485" width="2.2727%" height="15" fill="rgb(253,148,53)"/><text x="94.1894%" y="495.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (3 samples, 2.27%)</title><rect x="93.9394%" y="469" width="2.2727%" height="15" fill="rgb(218,129,16)"/><text x="94.1894%" y="479.50">&lt;..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (3 samples, 2.27%)</title><rect x="93.9394%" y="453" width="2.2727%" height="15" fill="rgb(216,85,19)"/><text x="94.1894%" y="463.50">t..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (3 samples, 2.27%)</title><rect x="93.9394%" y="437" width="2.2727%" height="15" fill="rgb(235,228,7)"/><text x="94.1894%" y="447.50">t..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3 samples, 2.27%)</title><rect x="93.9394%" y="421" width="2.2727%" height="15" fill="rgb(245,175,0)"/><text x="94.1894%" y="431.50">t..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (3 samples, 2.27%)</title><rect x="93.9394%" y="405" width="2.2727%" height="15" fill="rgb(208,168,36)"/><text x="94.1894%" y="415.50">t..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 2.27%)</title><rect x="93.9394%" y="389" width="2.2727%" height="15" fill="rgb(246,171,24)"/><text x="94.1894%" y="399.50">&lt;..</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (3 samples, 2.27%)</title><rect x="93.9394%" y="373" width="2.2727%" height="15" fill="rgb(215,142,24)"/><text x="94.1894%" y="383.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::run (3 samples, 2.27%)</title><rect x="93.9394%" y="357" width="2.2727%" height="15" fill="rgb(250,187,7)"/><text x="94.1894%" y="367.50">t..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (3 samples, 2.27%)</title><rect x="93.9394%" y="341" width="2.2727%" height="15" fill="rgb(228,66,33)"/><text x="94.1894%" y="351.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (3 samples, 2.27%)</title><rect x="93.9394%" y="325" width="2.2727%" height="15" fill="rgb(234,215,21)"/><text x="94.1894%" y="335.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (3 samples, 2.27%)</title><rect x="93.9394%" y="309" width="2.2727%" height="15" fill="rgb(222,191,20)"/><text x="94.1894%" y="319.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (3 samples, 2.27%)</title><rect x="93.9394%" y="293" width="2.2727%" height="15" fill="rgb(245,79,54)"/><text x="94.1894%" y="303.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (3 samples, 2.27%)</title><rect x="93.9394%" y="277" width="2.2727%" height="15" fill="rgb(240,10,37)"/><text x="94.1894%" y="287.50">t..</text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (3 samples, 2.27%)</title><rect x="93.9394%" y="261" width="2.2727%" height="15" fill="rgb(214,192,32)"/><text x="94.1894%" y="271.50">&lt;..</text></g><g><title>tokio::runtime::thread_pool::park::Inner::park (3 samples, 2.27%)</title><rect x="93.9394%" y="245" width="2.2727%" height="15" fill="rgb(209,36,54)"/><text x="94.1894%" y="255.50">t..</text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_driver (3 samples, 2.27%)</title><rect x="93.9394%" y="229" width="2.2727%" height="15" fill="rgb(220,10,11)"/><text x="94.1894%" y="239.50">t..</text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (3 samples, 2.27%)</title><rect x="93.9394%" y="213" width="2.2727%" height="15" fill="rgb(221,106,17)"/><text x="94.1894%" y="223.50">&lt;..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (3 samples, 2.27%)</title><rect x="93.9394%" y="197" width="2.2727%" height="15" fill="rgb(251,142,44)"/><text x="94.1894%" y="207.50">&lt;..</text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (3 samples, 2.27%)</title><rect x="93.9394%" y="181" width="2.2727%" height="15" fill="rgb(238,13,15)"/><text x="94.1894%" y="191.50">&lt;..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (3 samples, 2.27%)</title><rect x="93.9394%" y="165" width="2.2727%" height="15" fill="rgb(208,107,27)"/><text x="94.1894%" y="175.50">t..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_timeout (1 samples, 0.76%)</title><rect x="95.4545%" y="149" width="0.7576%" height="15" fill="rgb(205,136,37)"/><text x="95.7045%" y="159.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (1 samples, 0.76%)</title><rect x="95.4545%" y="133" width="0.7576%" height="15" fill="rgb(250,205,27)"/><text x="95.7045%" y="143.50"></text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (1 samples, 0.76%)</title><rect x="95.4545%" y="117" width="0.7576%" height="15" fill="rgb(210,80,43)"/><text x="95.7045%" y="127.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park_timeout (1 samples, 0.76%)</title><rect x="95.4545%" y="101" width="0.7576%" height="15" fill="rgb(247,160,36)"/><text x="95.7045%" y="111.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (1 samples, 0.76%)</title><rect x="95.4545%" y="85" width="0.7576%" height="15" fill="rgb(234,13,49)"/><text x="95.7045%" y="95.50"></text></g><g><title>tokio::io::driver::Driver::turn (1 samples, 0.76%)</title><rect x="95.4545%" y="69" width="0.7576%" height="15" fill="rgb(234,122,0)"/><text x="95.7045%" y="79.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 0.76%)</title><rect x="95.4545%" y="53" width="0.7576%" height="15" fill="rgb(207,146,38)"/><text x="95.7045%" y="63.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (1 samples, 0.76%)</title><rect x="95.4545%" y="37" width="0.7576%" height="15" fill="rgb(207,177,25)"/><text x="95.7045%" y="47.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 1.52%)</title><rect x="96.2121%" y="85" width="1.5152%" height="15" fill="rgb(211,178,42)"/><text x="96.4621%" y="95.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::{{closure}} (1 samples, 0.76%)</title><rect x="96.9697%" y="69" width="0.7576%" height="15" fill="rgb(230,69,54)"/><text x="97.2197%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.76%)</title><rect x="96.9697%" y="53" width="0.7576%" height="15" fill="rgb(214,135,41)"/><text x="97.2197%" y="63.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park_timeout (3 samples, 2.27%)</title><rect x="96.2121%" y="149" width="2.2727%" height="15" fill="rgb(237,67,25)"/><text x="96.4621%" y="159.50">&lt;..</text></g><g><title>tokio::io::driver::Driver::turn (3 samples, 2.27%)</title><rect x="96.2121%" y="133" width="2.2727%" height="15" fill="rgb(222,189,50)"/><text x="96.4621%" y="143.50">t..</text></g><g><title>mio::poll::Poll::poll (3 samples, 2.27%)</title><rect x="96.2121%" y="117" width="2.2727%" height="15" fill="rgb(245,148,34)"/><text x="96.4621%" y="127.50">m..</text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (3 samples, 2.27%)</title><rect x="96.2121%" y="101" width="2.2727%" height="15" fill="rgb(222,29,6)"/><text x="96.4621%" y="111.50">m..</text></g><g><title>epoll_wait (1 samples, 0.76%)</title><rect x="97.7273%" y="85" width="0.7576%" height="15" fill="rgb(221,189,43)"/><text x="97.9773%" y="95.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.76%)</title><rect x="97.7273%" y="69" width="0.7576%" height="15" fill="rgb(207,36,27)"/><text x="97.9773%" y="79.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (4 samples, 3.03%)</title><rect x="96.2121%" y="869" width="3.0303%" height="15" fill="rgb(217,90,24)"/><text x="96.4621%" y="879.50">std..</text></g><g><title>std::panic::catch_unwind (4 samples, 3.03%)</title><rect x="96.2121%" y="853" width="3.0303%" height="15" fill="rgb(224,66,35)"/><text x="96.4621%" y="863.50">std..</text></g><g><title>std::panicking::try (4 samples, 3.03%)</title><rect x="96.2121%" y="837" width="3.0303%" height="15" fill="rgb(221,13,50)"/><text x="96.4621%" y="847.50">std..</text></g><g><title>__rust_try (4 samples, 3.03%)</title><rect x="96.2121%" y="821" width="3.0303%" height="15" fill="rgb(236,68,49)"/><text x="96.4621%" y="831.50">__r..</text></g><g><title>std::panicking::try::do_call (4 samples, 3.03%)</title><rect x="96.2121%" y="805" width="3.0303%" height="15" fill="rgb(229,146,28)"/><text x="96.4621%" y="815.50">std..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (4 samples, 3.03%)</title><rect x="96.2121%" y="789" width="3.0303%" height="15" fill="rgb(225,31,38)"/><text x="96.4621%" y="799.50">&lt;co..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (4 samples, 3.03%)</title><rect x="96.2121%" y="773" width="3.0303%" height="15" fill="rgb(250,208,3)"/><text x="96.4621%" y="783.50">std..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 3.03%)</title><rect x="96.2121%" y="757" width="3.0303%" height="15" fill="rgb(246,54,23)"/><text x="96.4621%" y="767.50">std..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (4 samples, 3.03%)</title><rect x="96.2121%" y="741" width="3.0303%" height="15" fill="rgb(243,76,11)"/><text x="96.4621%" y="751.50">tok..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (4 samples, 3.03%)</title><rect x="96.2121%" y="725" width="3.0303%" height="15" fill="rgb(245,21,50)"/><text x="96.4621%" y="735.50">tok..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (4 samples, 3.03%)</title><rect x="96.2121%" y="709" width="3.0303%" height="15" fill="rgb(228,9,43)"/><text x="96.4621%" y="719.50">tok..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (4 samples, 3.03%)</title><rect x="96.2121%" y="693" width="3.0303%" height="15" fill="rgb(208,100,47)"/><text x="96.4621%" y="703.50">tok..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (4 samples, 3.03%)</title><rect x="96.2121%" y="677" width="3.0303%" height="15" fill="rgb(232,26,8)"/><text x="96.4621%" y="687.50">tok..</text></g><g><title>tokio::runtime::task::raw::poll (4 samples, 3.03%)</title><rect x="96.2121%" y="661" width="3.0303%" height="15" fill="rgb(216,166,38)"/><text x="96.4621%" y="671.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 3.03%)</title><rect x="96.2121%" y="645" width="3.0303%" height="15" fill="rgb(251,202,51)"/><text x="96.4621%" y="655.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (4 samples, 3.03%)</title><rect x="96.2121%" y="629" width="3.0303%" height="15" fill="rgb(254,216,34)"/><text x="96.4621%" y="639.50">tok..</text></g><g><title>tokio::runtime::task::harness::poll_future (4 samples, 3.03%)</title><rect x="96.2121%" y="613" width="3.0303%" height="15" fill="rgb(251,32,27)"/><text x="96.4621%" y="623.50">tok..</text></g><g><title>std::panic::catch_unwind (4 samples, 3.03%)</title><rect x="96.2121%" y="597" width="3.0303%" height="15" fill="rgb(208,127,28)"/><text x="96.4621%" y="607.50">std..</text></g><g><title>std::panicking::try (4 samples, 3.03%)</title><rect x="96.2121%" y="581" width="3.0303%" height="15" fill="rgb(224,137,22)"/><text x="96.4621%" y="591.50">std..</text></g><g><title>__rust_try (4 samples, 3.03%)</title><rect x="96.2121%" y="565" width="3.0303%" height="15" fill="rgb(254,70,32)"/><text x="96.4621%" y="575.50">__r..</text></g><g><title>std::panicking::try::do_call (4 samples, 3.03%)</title><rect x="96.2121%" y="549" width="3.0303%" height="15" fill="rgb(229,75,37)"/><text x="96.4621%" y="559.50">std..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (4 samples, 3.03%)</title><rect x="96.2121%" y="533" width="3.0303%" height="15" fill="rgb(252,64,23)"/><text x="96.4621%" y="543.50">&lt;co..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (4 samples, 3.03%)</title><rect x="96.2121%" y="517" width="3.0303%" height="15" fill="rgb(232,162,48)"/><text x="96.4621%" y="527.50">tok..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (4 samples, 3.03%)</title><rect x="96.2121%" y="501" width="3.0303%" height="15" fill="rgb(246,160,12)"/><text x="96.4621%" y="511.50">tok..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 3.03%)</title><rect x="96.2121%" y="485" width="3.0303%" height="15" fill="rgb(247,166,0)"/><text x="96.4621%" y="495.50">tok..</text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (4 samples, 3.03%)</title><rect x="96.2121%" y="469" width="3.0303%" height="15" fill="rgb(249,219,21)"/><text x="96.4621%" y="479.50">tok..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 3.03%)</title><rect x="96.2121%" y="453" width="3.0303%" height="15" fill="rgb(205,209,3)"/><text x="96.4621%" y="463.50">&lt;to..</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (4 samples, 3.03%)</title><rect x="96.2121%" y="437" width="3.0303%" height="15" fill="rgb(243,44,1)"/><text x="96.4621%" y="447.50">tok..</text></g><g><title>tokio::runtime::thread_pool::worker::run (4 samples, 3.03%)</title><rect x="96.2121%" y="421" width="3.0303%" height="15" fill="rgb(206,159,16)"/><text x="96.4621%" y="431.50">tok..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (4 samples, 3.03%)</title><rect x="96.2121%" y="405" width="3.0303%" height="15" fill="rgb(244,77,30)"/><text x="96.4621%" y="415.50">tok..</text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (4 samples, 3.03%)</title><rect x="96.2121%" y="389" width="3.0303%" height="15" fill="rgb(218,69,12)"/><text x="96.4621%" y="399.50">tok..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (4 samples, 3.03%)</title><rect x="96.2121%" y="373" width="3.0303%" height="15" fill="rgb(212,87,7)"/><text x="96.4621%" y="383.50">tok..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (4 samples, 3.03%)</title><rect x="96.2121%" y="357" width="3.0303%" height="15" fill="rgb(245,114,25)"/><text x="96.4621%" y="367.50">tok..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (4 samples, 3.03%)</title><rect x="96.2121%" y="341" width="3.0303%" height="15" fill="rgb(210,61,42)"/><text x="96.4621%" y="351.50">tok..</text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (4 samples, 3.03%)</title><rect x="96.2121%" y="325" width="3.0303%" height="15" fill="rgb(211,52,33)"/><text x="96.4621%" y="335.50">&lt;to..</text></g><g><title>tokio::runtime::thread_pool::park::Inner::park (4 samples, 3.03%)</title><rect x="96.2121%" y="309" width="3.0303%" height="15" fill="rgb(234,58,33)"/><text x="96.4621%" y="319.50">tok..</text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_driver (4 samples, 3.03%)</title><rect x="96.2121%" y="293" width="3.0303%" height="15" fill="rgb(220,115,36)"/><text x="96.4621%" y="303.50">tok..</text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (4 samples, 3.03%)</title><rect x="96.2121%" y="277" width="3.0303%" height="15" fill="rgb(243,153,54)"/><text x="96.4621%" y="287.50">&lt;to..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (4 samples, 3.03%)</title><rect x="96.2121%" y="261" width="3.0303%" height="15" fill="rgb(251,47,18)"/><text x="96.4621%" y="271.50">&lt;to..</text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (4 samples, 3.03%)</title><rect x="96.2121%" y="245" width="3.0303%" height="15" fill="rgb(242,102,42)"/><text x="96.4621%" y="255.50">&lt;to..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (4 samples, 3.03%)</title><rect x="96.2121%" y="229" width="3.0303%" height="15" fill="rgb(234,31,38)"/><text x="96.4621%" y="239.50">tok..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_timeout (4 samples, 3.03%)</title><rect x="96.2121%" y="213" width="3.0303%" height="15" fill="rgb(221,117,51)"/><text x="96.4621%" y="223.50">tok..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park_timeout (4 samples, 3.03%)</title><rect x="96.2121%" y="197" width="3.0303%" height="15" fill="rgb(212,20,18)"/><text x="96.4621%" y="207.50">&lt;to..</text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park_timeout (4 samples, 3.03%)</title><rect x="96.2121%" y="181" width="3.0303%" height="15" fill="rgb(245,133,36)"/><text x="96.4621%" y="191.50">&lt;to..</text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park_timeout (4 samples, 3.03%)</title><rect x="96.2121%" y="165" width="3.0303%" height="15" fill="rgb(212,6,19)"/><text x="96.4621%" y="175.50">&lt;to..</text></g><g><title>tokio::signal::unix::driver::Driver::process (1 samples, 0.76%)</title><rect x="98.4848%" y="149" width="0.7576%" height="15" fill="rgb(218,1,36)"/><text x="98.7348%" y="159.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_ready (1 samples, 0.76%)</title><rect x="98.4848%" y="133" width="0.7576%" height="15" fill="rgb(246,84,54)"/><text x="98.7348%" y="143.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (1 samples, 0.76%)</title><rect x="98.4848%" y="117" width="0.7576%" height="15" fill="rgb(242,110,6)"/><text x="98.7348%" y="127.50"></text></g><g><title>tokio::coop::poll_proceed (1 samples, 0.76%)</title><rect x="98.4848%" y="101" width="0.7576%" height="15" fill="rgb(214,47,5)"/><text x="98.7348%" y="111.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.76%)</title><rect x="98.4848%" y="85" width="0.7576%" height="15" fill="rgb(218,159,25)"/><text x="98.7348%" y="95.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.76%)</title><rect x="98.4848%" y="69" width="0.7576%" height="15" fill="rgb(215,211,28)"/><text x="98.7348%" y="79.50"></text></g><g><title>all (132 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(238,59,32)"/><text x="0.2500%" y="911.50"></text></g><g><title>tokio-runtime-w (74 samples, 56.06%)</title><rect x="43.9394%" y="885" width="56.0606%" height="15" fill="rgb(226,82,3)"/><text x="44.1894%" y="895.50">tokio-runtime-w</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.76%)</title><rect x="99.2424%" y="869" width="0.7576%" height="15" fill="rgb(240,164,32)"/><text x="99.4924%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.76%)</title><rect x="99.2424%" y="853" width="0.7576%" height="15" fill="rgb(232,46,7)"/><text x="99.4924%" y="863.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.76%)</title><rect x="99.2424%" y="837" width="0.7576%" height="15" fill="rgb(229,129,53)"/><text x="99.4924%" y="847.50"></text></g><g><title>std::panicking::try (1 samples, 0.76%)</title><rect x="99.2424%" y="821" width="0.7576%" height="15" fill="rgb(234,188,29)"/><text x="99.4924%" y="831.50"></text></g><g><title>__rust_try (1 samples, 0.76%)</title><rect x="99.2424%" y="805" width="0.7576%" height="15" fill="rgb(246,141,4)"/><text x="99.4924%" y="815.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.76%)</title><rect x="99.2424%" y="789" width="0.7576%" height="15" fill="rgb(229,23,39)"/><text x="99.4924%" y="799.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt; (1 samples, 0.76%)</title><rect x="99.2424%" y="773" width="0.7576%" height="15" fill="rgb(206,12,3)"/><text x="99.4924%" y="783.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.76%)</title><rect x="99.2424%" y="757" width="0.7576%" height="15" fill="rgb(252,226,20)"/><text x="99.4924%" y="767.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.76%)</title><rect x="99.2424%" y="741" width="0.7576%" height="15" fill="rgb(216,123,35)"/><text x="99.4924%" y="751.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.76%)</title><rect x="99.2424%" y="725" width="0.7576%" height="15" fill="rgb(212,68,40)"/><text x="99.4924%" y="735.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.76%)</title><rect x="99.2424%" y="709" width="0.7576%" height="15" fill="rgb(254,125,32)"/><text x="99.4924%" y="719.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.76%)</title><rect x="99.2424%" y="693" width="0.7576%" height="15" fill="rgb(253,97,22)"/><text x="99.4924%" y="703.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::{{closure}} (1 samples, 0.76%)</title><rect x="99.2424%" y="677" width="0.7576%" height="15" fill="rgb(241,101,14)"/><text x="99.4924%" y="687.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (1 samples, 0.76%)</title><rect x="99.2424%" y="661" width="0.7576%" height="15" fill="rgb(238,103,29)"/><text x="99.4924%" y="671.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1 samples, 0.76%)</title><rect x="99.2424%" y="645" width="0.7576%" height="15" fill="rgb(233,195,47)"/><text x="99.4924%" y="655.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::{{closure}} (1 samples, 0.76%)</title><rect x="99.2424%" y="629" width="0.7576%" height="15" fill="rgb(246,218,30)"/><text x="99.4924%" y="639.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1 samples, 0.76%)</title><rect x="99.2424%" y="613" width="0.7576%" height="15" fill="rgb(219,145,47)"/><text x="99.4924%" y="623.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (1 samples, 0.76%)</title><rect x="99.2424%" y="597" width="0.7576%" height="15" fill="rgb(243,12,26)"/><text x="99.4924%" y="607.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (1 samples, 0.76%)</title><rect x="99.2424%" y="581" width="0.7576%" height="15" fill="rgb(214,87,16)"/><text x="99.4924%" y="591.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="99.2424%" y="565" width="0.7576%" height="15" fill="rgb(208,99,42)"/><text x="99.4924%" y="575.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park (1 samples, 0.76%)</title><rect x="99.2424%" y="549" width="0.7576%" height="15" fill="rgb(253,99,2)"/><text x="99.4924%" y="559.50"></text></g><g><title>tokio::runtime::thread_pool::park::Inner::park_driver (1 samples, 0.76%)</title><rect x="99.2424%" y="533" width="0.7576%" height="15" fill="rgb(220,168,23)"/><text x="99.4924%" y="543.50"></text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="99.2424%" y="517" width="0.7576%" height="15" fill="rgb(242,38,24)"/><text x="99.4924%" y="527.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="99.2424%" y="501" width="0.7576%" height="15" fill="rgb(225,182,9)"/><text x="99.4924%" y="511.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="99.2424%" y="485" width="0.7576%" height="15" fill="rgb(243,178,37)"/><text x="99.4924%" y="495.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (1 samples, 0.76%)</title><rect x="99.2424%" y="469" width="0.7576%" height="15" fill="rgb(232,139,19)"/><text x="99.4924%" y="479.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="99.2424%" y="453" width="0.7576%" height="15" fill="rgb(225,201,24)"/><text x="99.4924%" y="463.50"></text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="99.2424%" y="437" width="0.7576%" height="15" fill="rgb(221,47,46)"/><text x="99.4924%" y="447.50"></text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="99.2424%" y="421" width="0.7576%" height="15" fill="rgb(249,23,13)"/><text x="99.4924%" y="431.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (1 samples, 0.76%)</title><rect x="99.2424%" y="405" width="0.7576%" height="15" fill="rgb(219,9,5)"/><text x="99.4924%" y="415.50"></text></g><g><title>tokio::io::driver::Driver::turn (1 samples, 0.76%)</title><rect x="99.2424%" y="389" width="0.7576%" height="15" fill="rgb(254,171,16)"/><text x="99.4924%" y="399.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (1 samples, 0.76%)</title><rect x="99.2424%" y="373" width="0.7576%" height="15" fill="rgb(230,171,20)"/><text x="99.4924%" y="383.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (1 samples, 0.76%)</title><rect x="99.2424%" y="357" width="0.7576%" height="15" fill="rgb(210,71,41)"/><text x="99.4924%" y="367.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (1 samples, 0.76%)</title><rect x="99.2424%" y="341" width="0.7576%" height="15" fill="rgb(206,173,20)"/><text x="99.4924%" y="351.50"></text></g><g><title>tokio::util::wake_list::WakeList::new (1 samples, 0.76%)</title><rect x="99.2424%" y="325" width="0.7576%" height="15" fill="rgb(233,88,34)"/><text x="99.4924%" y="335.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.76%)</title><rect x="99.2424%" y="309" width="0.7576%" height="15" fill="rgb(223,209,46)"/><text x="99.4924%" y="319.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (1 samples, 0.76%)</title><rect x="99.2424%" y="293" width="0.7576%" height="15" fill="rgb(250,43,18)"/><text x="99.4924%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.76%)</title><rect x="99.2424%" y="277" width="0.7576%" height="15" fill="rgb(208,13,10)"/><text x="99.4924%" y="287.50"></text></g></svg></svg>